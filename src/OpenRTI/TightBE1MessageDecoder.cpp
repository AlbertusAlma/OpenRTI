/* -*-c++-*- OpenRTI - Copyright (C) 2009-2011 Mathias Froehlich
 *
 *
 * This file is part of OpenRTI.
 *
 * OpenRTI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * OpenRTI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OpenRTI.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This file is autogenerated by messagegen.py. Do not edit!
 *
 */

#include "TightBE1MessageDecoder.h"
#include "AbstractMessageDecoder.h"
#include "DecodeDataStream.h"
#include "Export.h"
#include "Message.h"
#include "NetworkBuffer.h"

namespace OpenRTI {

class OPENRTI_LOCAL TightBE1MessageDecoder::DecodeStream : public DecodeDataStream {
public:
  DecodeStream(const VariableLengthData& variableLengthData, NetworkBuffer& networkBuffer) :
    DecodeDataStream(variableLengthData),
    _networkBuffer(networkBuffer)
  { }
  void readCallbackModel(CallbackModel& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = HLA_IMMEDIATE;
      break;
    case 1:
      value = HLA_EVOKED;
      break;
    default:
      value = HLA_EVOKED;
      break;
    }
  }

  void readOrderType(OrderType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = RECEIVE;
      break;
    case 1:
      value = TIMESTAMP;
      break;
    default:
      value = TIMESTAMP;
      break;
    }
  }

  void readTransportationType(TransportationType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = RELIABLE;
      break;
    case 1:
      value = BEST_EFFORT;
      break;
    default:
      value = BEST_EFFORT;
      break;
    }
  }

  void readSubscriptionType(SubscriptionType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = Unsubscribed;
      break;
    case 1:
      value = SubscribedPassive;
      break;
    case 2:
      value = SubscribedActive;
      break;
    default:
      value = SubscribedActive;
      break;
    }
  }

  void readPublicationType(PublicationType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = Unpublished;
      break;
    case 1:
      value = Published;
      break;
    default:
      value = Published;
      break;
    }
  }

  void readResignAction(ResignAction& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = UNCONDITIONALLY_DIVEST_ATTRIBUTES;
      break;
    case 1:
      value = DELETE_OBJECTS;
      break;
    case 2:
      value = CANCEL_PENDING_OWNERSHIP_ACQUISITIONS;
      break;
    case 3:
      value = DELETE_OBJECTS_THEN_DIVEST;
      break;
    case 4:
      value = CANCEL_THEN_DELETE_THEN_DIVEST;
      break;
    case 5:
      value = NO_ACTION;
      break;
    default:
      value = NO_ACTION;
      break;
    }
  }

  void readRestoreFailureReason(RestoreFailureReason& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = RTI_UNABLE_TO_RESTORE;
      break;
    case 1:
      value = FEDERATE_REPORTED_FAILURE_DURING_RESTORE;
      break;
    case 2:
      value = FEDERATE_RESIGNED_DURING_RESTORE;
      break;
    case 3:
      value = RTI_DETECTED_FAILURE_DURING_RESTORE;
      break;
    default:
      value = RTI_DETECTED_FAILURE_DURING_RESTORE;
      break;
    }
  }

  void readRestoreStatus(RestoreStatus& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = NO_RESTORE_IN_PROGRESS;
      break;
    case 1:
      value = FEDERATE_RESTORE_REQUEST_PENDING;
      break;
    case 2:
      value = FEDERATE_WAITING_FOR_RESTORE_TO_BEGIN;
      break;
    case 3:
      value = FEDERATE_PREPARED_TO_RESTORE;
      break;
    case 4:
      value = FEDERATE_RESTORING;
      break;
    case 5:
      value = FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE;
      break;
    default:
      value = FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE;
      break;
    }
  }

  void readSaveFailureReason(SaveFailureReason& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = RTI_UNABLE_TO_SAVE;
      break;
    case 1:
      value = FEDERATE_REPORTED_FAILURE_DURING_SAVE;
      break;
    case 2:
      value = FEDERATE_RESIGNED_DURING_SAVE;
      break;
    case 3:
      value = RTI_DETECTED_FAILURE_DURING_SAVE;
      break;
    case 4:
      value = SAVE_TIME_CANNOT_BE_HONORED;
      break;
    default:
      value = SAVE_TIME_CANNOT_BE_HONORED;
      break;
    }
  }

  void readSaveStatus(SaveStatus& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = NO_SAVE_IN_PROGRESS;
      break;
    case 1:
      value = FEDERATE_INSTRUCTED_TO_SAVE;
      break;
    case 2:
      value = FEDERATE_SAVING;
      break;
    case 3:
      value = FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE;
      break;
    default:
      value = FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE;
      break;
    }
  }

  void readServiceGroupIndicator(ServiceGroupIndicator& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = FEDERATION_MANAGEMENT;
      break;
    case 1:
      value = DECLARATION_MANAGEMENT;
      break;
    case 2:
      value = OBJECT_MANAGEMENT;
      break;
    case 3:
      value = OWNERSHIP_MANAGEMENT;
      break;
    case 4:
      value = TIME_MANAGEMENT;
      break;
    case 5:
      value = DATA_DISTRIBUTION_MANAGEMENT;
      break;
    case 6:
      value = SUPPORT_SERVICES;
      break;
    default:
      value = SUPPORT_SERVICES;
      break;
    }
  }

  void readBool(bool& value)
  {
    value = readBoolCompressed();
  }

  void readString(std::wstring& value)
  {
    value = readStringCompressed();
  }

  void readUnsigned(unsigned& value)
  {
    value = readUInt32Compressed();
  }

  void readSizeType(size_t& value)
  {
    value = readSizeTCompressed();
  }

  void readFederationHandle(FederationHandle& value)
  {
    value = readUInt16Compressed();
  }

  void readFOMModuleHandle(FOMModuleHandle& value)
  {
    value = readUInt16Compressed();
  }

  void readAttributeHandle(AttributeHandle& value)
  {
    value = readUInt32Compressed();
  }

  void readDimensionHandle(DimensionHandle& value)
  {
    value = readUInt32Compressed();
  }

  void readObjectClassHandle(ObjectClassHandle& value)
  {
    value = readUInt32Compressed();
  }

  void readObjectInstanceHandle(ObjectInstanceHandle& value)
  {
    value = readUInt32Compressed();
  }

  void readInteractionClassHandle(InteractionClassHandle& value)
  {
    value = readUInt32Compressed();
  }

  void readParameterHandle(ParameterHandle& value)
  {
    value = readUInt32Compressed();
  }

  void readFederateHandle(FederateHandle& value)
  {
    value = readUInt32Compressed();
  }

  void readSpaceHandle(SpaceHandle& value)
  {
    value = readUInt32Compressed();
  }

  void readTransportationHandle(TransportationHandle& value)
  {
    value = readUInt8Compressed();
  }

  void readOrderingHandle(OrderingHandle& value)
  {
    value = readUInt8Compressed();
  }

  void readMessageRetractionHandle(MessageRetractionHandle& value)
  {
    value = readUInt64Compressed();
  }

  void readRegionHandle(RegionHandle& value)
  {
    value = readUInt64Compressed();
  }

  void readAttributeHandleVector(AttributeHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (AttributeHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readAttributeHandle(*i);
    }
  }

  void readFederateHandleSet(FederateHandleSet& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      FederateHandle scalar;
      readFederateHandle(scalar);
      value.insert(scalar);
    }
  }

  void readFederateHandleVector(FederateHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FederateHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFederateHandle(*i);
    }
  }

  void readParameterHandleVector(ParameterHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (ParameterHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readParameterHandle(*i);
    }
  }

  void readDimensionHandleVector(DimensionHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (DimensionHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readDimensionHandle(*i);
    }
  }

  void readDimensionHandleSet(DimensionHandleSet& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      DimensionHandle scalar;
      readDimensionHandle(scalar);
      value.insert(scalar);
    }
  }

  void readObjectInstanceHandleVector(ObjectInstanceHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (ObjectInstanceHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readObjectInstanceHandle(*i);
    }
  }

  void readFOMModuleHandleVector(FOMModuleHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMModuleHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMModuleHandle(*i);
    }
  }

  void readFOMModuleHandleSet(FOMModuleHandleSet& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      FOMModuleHandle scalar;
      readFOMModuleHandle(scalar);
      value.insert(scalar);
    }
  }

  void readStringVector(StringVector& value)
  {
    value.resize(readSizeTCompressed());
    for (StringVector::iterator i = value.begin(); i != value.end(); ++i) {
      readString(*i);
    }
  }

  void readStringSet(StringSet& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      String scalar;
      readString(scalar);
      value.insert(scalar);
    }
  }

  void readVariableLengthData(VariableLengthData& value)
  {
    size_t size = readSizeTCompressed();
    value.resize(size);
    if (size)
      _networkBuffer.addBuffer(VariableLengthData(size));
  }

  void readRangeBoundsValue(RangeBoundsValue& value)
  {
    readUnsigned(value.getLowerBound());
    readUnsigned(value.getUpperBound());
  }

  void readDimensionHandleRangeBoundsValuePair(DimensionHandleRangeBoundsValuePair& value)
  {
    readDimensionHandle(value.first);
    readRangeBoundsValue(value.second);
  }

  void readRegionValue(RegionValue& value)
  {
    value.resize(readSizeTCompressed());
    for (RegionValue::iterator i = value.begin(); i != value.end(); ++i) {
      readDimensionHandleRangeBoundsValuePair(*i);
    }
  }

  void readRegionValueList(RegionValueList& value)
  {
    value.resize(readSizeTCompressed());
    for (RegionValueList::iterator i = value.begin(); i != value.end(); ++i) {
      readRegionValue(*i);
    }
  }

  void readInteractionClassHandleRegionValueListPair(InteractionClassHandleRegionValueListPair& value)
  {
    readInteractionClassHandle(value.first);
    readRegionValueList(value.second);
  }

  void readAttributeHandleRegionValueListPair(AttributeHandleRegionValueListPair& value)
  {
    readAttributeHandle(value.first);
    readRegionValueList(value.second);
  }

  void readAttributeState(AttributeState& value)
  {
    readAttributeHandle(value.getAttributeHandle());
  }

  void readAttributeStateVector(AttributeStateVector& value)
  {
    value.resize(readSizeTCompressed());
    for (AttributeStateVector::iterator i = value.begin(); i != value.end(); ++i) {
      readAttributeState(*i);
    }
  }

  void readParameterValue(ParameterValue& value)
  {
    readParameterHandle(value.getParameterHandle());
    readVariableLengthData(value.getValue());
  }

  void readParameterValueVector(ParameterValueVector& value)
  {
    value.resize(readSizeTCompressed());
    for (ParameterValueVector::iterator i = value.begin(); i != value.end(); ++i) {
      readParameterValue(*i);
    }
  }

  void readAttributeValue(AttributeValue& value)
  {
    readAttributeHandle(value.getAttributeHandle());
    readVariableLengthData(value.getValue());
  }

  void readAttributeValueVector(AttributeValueVector& value)
  {
    value.resize(readSizeTCompressed());
    for (AttributeValueVector::iterator i = value.begin(); i != value.end(); ++i) {
      readAttributeValue(*i);
    }
  }

  void readTimeStamp(TimeStamp& value)
  {
    readVariableLengthData(value.getLogicalTime());
    readBool(value.getZeroLookahead());
  }

  void readFederateHandleTimeStampMap(FederateHandleTimeStampMap& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      FederateHandle key;
      readFederateHandle(key);
      readTimeStamp(value[key]);
    }
  }

  void readFederateHandleSaveStatusPair(FederateHandleSaveStatusPair& value)
  {
    readFederateHandle(value.first);
    readSaveStatus(value.second);
  }

  void readFederateHandleSaveStatusPairVector(FederateHandleSaveStatusPairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FederateHandleSaveStatusPairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFederateHandleSaveStatusPair(*i);
    }
  }

  void readFederateHandleRestoreStatusPair(FederateHandleRestoreStatusPair& value)
  {
    readFederateHandle(value.first);
    readRestoreStatus(value.second);
  }

  void readFederateHandleRestoreStatusPairVector(FederateHandleRestoreStatusPairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FederateHandleRestoreStatusPairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFederateHandleRestoreStatusPair(*i);
    }
  }

  void readFederationExecutionInformation(FederationExecutionInformation& value)
  {
    readString(value.getFederationExecutionName());
    readString(value.getLogicalTimeFactoryName());
  }

  void readFederationExecutionInformationVector(FederationExecutionInformationVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FederationExecutionInformationVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFederationExecutionInformation(*i);
    }
  }

  void readObjectInstanceHandleNamePair(ObjectInstanceHandleNamePair& value)
  {
    readObjectInstanceHandle(value.first);
    readString(value.second);
  }

  void readObjectInstanceHandleNamePairVector(ObjectInstanceHandleNamePairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (ObjectInstanceHandleNamePairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readObjectInstanceHandleNamePair(*i);
    }
  }

  void readCreateFederationExecutionResponseType(CreateFederationExecutionResponseType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = CreateFederationExecutionResponseSuccess;
      break;
    case 1:
      value = CreateFederationExecutionResponseFederationExecutionAlreadyExists;
      break;
    case 2:
      value = CreateFederationExecutionResponseCouldNotOpenFDD;
      break;
    case 3:
      value = CreateFederationExecutionResponseErrorReadingFDD;
      break;
    case 4:
      value = CreateFederationExecutionResponseCouldNotCreateLogicalTimeFactory;
      break;
    case 5:
      value = CreateFederationExecutionResponseRTIinternalError;
      break;
    default:
      value = CreateFederationExecutionResponseRTIinternalError;
      break;
    }
  }

  void readDestroyFederationExecutionResponseType(DestroyFederationExecutionResponseType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = DestroyFederationExecutionResponseSuccess;
      break;
    case 1:
      value = DestroyFederationExecutionResponseFederatesCurrentlyJoined;
      break;
    case 2:
      value = DestroyFederationExecutionResponseFederationExecutionDoesNotExist;
      break;
    case 3:
      value = DestroyFederationExecutionResponseRTIinternalError;
      break;
    default:
      value = DestroyFederationExecutionResponseRTIinternalError;
      break;
    }
  }

  void readJoinFederationExecutionResponseType(JoinFederationExecutionResponseType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = JoinFederationExecutionResponseSuccess;
      break;
    case 1:
      value = JoinFederationExecutionResponseFederateNameAlreadyInUse;
      break;
    case 2:
      value = JoinFederationExecutionResponseFederationExecutionDoesNotExist;
      break;
    case 3:
      value = JoinFederationExecutionResponseSaveInProgress;
      break;
    case 4:
      value = JoinFederationExecutionResponseRestoreInProgress;
      break;
    default:
      value = JoinFederationExecutionResponseRestoreInProgress;
      break;
    }
  }

  void readRegisterFederationSynchronizationPointResponseType(RegisterFederationSynchronizationPointResponseType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = RegisterFederationSynchronizationPointResponseSuccess;
      break;
    case 1:
      value = RegisterFederationSynchronizationPointResponseLabelNotUnique;
      break;
    case 2:
      value = RegisterFederationSynchronizationPointResponseMemberNotJoined;
      break;
    default:
      value = RegisterFederationSynchronizationPointResponseMemberNotJoined;
      break;
    }
  }

  void readConfigurationParameterMap(ConfigurationParameterMap& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      String key;
      readString(key);
      readStringVector(value[key]);
    }
  }

  void readFOMStringTransportationType(FOMStringTransportationType& value)
  {
    readString(value.getName());
  }

  void readFOMStringTransportationTypeList(FOMStringTransportationTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringTransportationTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringTransportationType(*i);
    }
  }

  void readFOMStringDimension(FOMStringDimension& value)
  {
    readString(value.getName());
    readUnsigned(value.getUpperBound());
  }

  void readFOMStringDimensionList(FOMStringDimensionList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringDimensionList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringDimension(*i);
    }
  }

  void readFOMStringRoutingSpace(FOMStringRoutingSpace& value)
  {
    readString(value.getName());
    readStringSet(value.getDimensionSet());
  }

  void readFOMStringRoutingSpaceList(FOMStringRoutingSpaceList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringRoutingSpaceList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringRoutingSpace(*i);
    }
  }

  void readFOMStringParameter(FOMStringParameter& value)
  {
    readString(value.getName());
  }

  void readFOMStringParameterList(FOMStringParameterList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringParameterList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringParameter(*i);
    }
  }

  void readFOMStringInteractionClass(FOMStringInteractionClass& value)
  {
    readString(value.getName());
    readString(value.getParentName());
    readString(value.getOrderType());
    readString(value.getTransportationType());
    readString(value.getRoutingSpace());
    readStringSet(value.getDimensionSet());
    readFOMStringParameterList(value.getParameterList());
  }

  void readFOMStringInteractionClassList(FOMStringInteractionClassList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringInteractionClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringInteractionClass(*i);
    }
  }

  void readFOMStringAttribute(FOMStringAttribute& value)
  {
    readString(value.getName());
    readString(value.getOrderType());
    readString(value.getTransportationType());
    readString(value.getRoutingSpace());
    readStringSet(value.getDimensionSet());
  }

  void readFOMStringAttributeList(FOMStringAttributeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringAttributeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringAttribute(*i);
    }
  }

  void readFOMStringObjectClass(FOMStringObjectClass& value)
  {
    readString(value.getName());
    readString(value.getParentName());
    readFOMStringAttributeList(value.getAttributeList());
  }

  void readFOMStringObjectClassList(FOMStringObjectClassList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringObjectClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringObjectClass(*i);
    }
  }

  void readFOMStringModule(FOMStringModule& value)
  {
    readFOMStringTransportationTypeList(value.getTransportationTypeList());
    readFOMStringDimensionList(value.getDimensionList());
    readFOMStringRoutingSpaceList(value.getRoutingSpaceList());
    readFOMStringInteractionClassList(value.getInteractionClassList());
    readFOMStringObjectClassList(value.getObjectClassList());
  }

  void readFOMStringModuleList(FOMStringModuleList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringModuleList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringModule(*i);
    }
  }

  void readFOMTransportationType(FOMTransportationType& value)
  {
    readString(value.getName());
    readTransportationType(value.getTransportationType());
  }

  void readFOMTransportationTypeList(FOMTransportationTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMTransportationTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMTransportationType(*i);
    }
  }

  void readFOMTransportationTypeMap(FOMTransportationTypeMap& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      String key;
      readString(key);
      readFOMTransportationType(value[key]);
    }
  }

  void readFOMDimension(FOMDimension& value)
  {
    readString(value.getName());
    readDimensionHandle(value.getDimensionHandle());
    readUnsigned(value.getUpperBound());
  }

  void readFOMDimensionList(FOMDimensionList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMDimensionList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMDimension(*i);
    }
  }

  void readFOMDimensionMap(FOMDimensionMap& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      String key;
      readString(key);
      readFOMDimension(value[key]);
    }
  }

  void readFOMRoutingSpace(FOMRoutingSpace& value)
  {
    readString(value.getName());
    readSpaceHandle(value.getSpaceHandle());
    readDimensionHandleSet(value.getDimensionHandleSet());
  }

  void readFOMRoutingSpaceList(FOMRoutingSpaceList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMRoutingSpaceList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMRoutingSpace(*i);
    }
  }

  void readFOMRoutingSpaceMap(FOMRoutingSpaceMap& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      String key;
      readString(key);
      readFOMRoutingSpace(value[key]);
    }
  }

  void readFOMParameter(FOMParameter& value)
  {
    readString(value.getName());
    readParameterHandle(value.getParameterHandle());
  }

  void readFOMParameterList(FOMParameterList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMParameterList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMParameter(*i);
    }
  }

  void readFOMParameterMap(FOMParameterMap& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      String key;
      readString(key);
      readFOMParameter(value[key]);
    }
  }

  void readFOMInteractionClass(FOMInteractionClass& value)
  {
    readString(value.getName());
    readInteractionClassHandle(value.getInteractionClassHandle());
    readInteractionClassHandle(value.getParentInteractionClassHandle());
    readOrderType(value.getOrderType());
    readTransportationType(value.getTransportationType());
    readDimensionHandleSet(value.getDimensionHandleSet());
    readFOMParameterList(value.getParameterList());
  }

  void readFOMInteractionClassList(FOMInteractionClassList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMInteractionClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMInteractionClass(*i);
    }
  }

  void readFOMAttribute(FOMAttribute& value)
  {
    readString(value.getName());
    readAttributeHandle(value.getAttributeHandle());
    readOrderType(value.getOrderType());
    readTransportationType(value.getTransportationType());
    readDimensionHandleSet(value.getDimensionHandleSet());
  }

  void readFOMAttributeList(FOMAttributeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMAttributeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMAttribute(*i);
    }
  }

  void readFOMObjectClass(FOMObjectClass& value)
  {
    readString(value.getName());
    readObjectClassHandle(value.getObjectClassHandle());
    readObjectClassHandle(value.getParentObjectClassHandle());
    readFOMAttributeList(value.getAttributeList());
  }

  void readFOMObjectClassList(FOMObjectClassList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMObjectClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMObjectClass(*i);
    }
  }

  void readFOMModule(FOMModule& value)
  {
    readFOMModuleHandle(value.getFOMModuleHandle());
    readFOMModuleHandleSet(value.getRequiredFOMModuleHandleSet());
    readFOMTransportationTypeList(value.getTransportationTypeList());
    readFOMDimensionList(value.getDimensionList());
    readFOMRoutingSpaceList(value.getRoutingSpaceList());
    readFOMInteractionClassList(value.getInteractionClassList());
    readFOMObjectClassList(value.getObjectClassList());
  }

  void readFOMModuleList(FOMModuleList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMModuleList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMModule(*i);
    }
  }

  void readConnectionLostMessage(ConnectionLostMessage& value)
  {
    readString(value.getFaultDescription());
  }

  void readCreateFederationExecutionRequestMessage(CreateFederationExecutionRequestMessage& value)
  {
    readString(value.getFederationExecution());
    readString(value.getLogicalTimeFactoryName());
    readStringVector(value.getFOMModuleFileList());
    readFOMStringModuleList(value.getFOMStringModuleList());
  }

  void readCreateFederationExecutionResponseMessage(CreateFederationExecutionResponseMessage& value)
  {
    readCreateFederationExecutionResponseType(value.getCreateFederationExecutionResponseType());
    readString(value.getExceptionString());
  }

  void readDestroyFederationExecutionRequestMessage(DestroyFederationExecutionRequestMessage& value)
  {
    readString(value.getFederationExecution());
  }

  void readDestroyFederationExecutionResponseMessage(DestroyFederationExecutionResponseMessage& value)
  {
    readDestroyFederationExecutionResponseType(value.getDestroyFederationExecutionResponseType());
  }

  void readEnumerateFederationExecutionsRequestMessage(EnumerateFederationExecutionsRequestMessage& value)
  {
  }

  void readEnumerateFederationExecutionsResponseMessage(EnumerateFederationExecutionsResponseMessage& value)
  {
    readFederationExecutionInformationVector(value.getFederationExecutionInformationVector());
  }

  void readInsertFederationExecutionMessage(InsertFederationExecutionMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readString(value.getFederationName());
    readString(value.getLogicalTimeFactoryName());
    readConfigurationParameterMap(value.getConfigurationParameterMap());
    readFOMModuleList(value.getFOMModuleList());
  }

  void readShutdownFederationExecutionMessage(ShutdownFederationExecutionMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
  }

  void readEraseFederationExecutionMessage(EraseFederationExecutionMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
  }

  void readReleaseFederationHandleMessage(ReleaseFederationHandleMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
  }

  void readJoinFederationExecutionRequestMessage(JoinFederationExecutionRequestMessage& value)
  {
    readString(value.getFederationExecution());
    readString(value.getFederateType());
    readString(value.getFederateName());
    readFOMStringModuleList(value.getFOMStringModuleList());
    readConfigurationParameterMap(value.getConfigurationParameterMap());
  }

  void readJoinFederationExecutionResponseMessage(JoinFederationExecutionResponseMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readJoinFederationExecutionResponseType(value.getJoinFederationExecutionResponseType());
    readString(value.getExceptionString());
    readFederateHandle(value.getFederateHandle());
    readString(value.getFederateType());
    readString(value.getFederateName());
    readFOMModuleHandleVector(value.getFOMModuleHandleList());
  }

  void readResignFederationExecutionRequestMessage(ResignFederationExecutionRequestMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
  }

  void readJoinFederateNotifyMessage(JoinFederateNotifyMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readString(value.getFederateType());
    readString(value.getFederateName());
  }

  void readResignFederateNotifyMessage(ResignFederateNotifyMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
  }

  void readRegisterFederationSynchronizationPointMessage(RegisterFederationSynchronizationPointMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readString(value.getLabel());
    readVariableLengthData(value.getTag());
    readFederateHandleSet(value.getFederateHandleSet());
  }

  void readRegisterFederationSynchronizationPointResponseMessage(RegisterFederationSynchronizationPointResponseMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readString(value.getLabel());
    readRegisterFederationSynchronizationPointResponseType(value.getRegisterFederationSynchronizationPointResponseType());
  }

  void readAnnounceSynchronizationPointMessage(AnnounceSynchronizationPointMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readString(value.getLabel());
    readVariableLengthData(value.getTag());
    readBool(value.getAddJoiningFederates());
    readFederateHandleSet(value.getFederateHandleSet());
  }

  void readSynchronizationPointAchievedMessage(SynchronizationPointAchievedMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readString(value.getLabel());
    readFederateHandleSet(value.getFederateHandleSet());
  }

  void readFederationSynchronizedMessage(FederationSynchronizedMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readString(value.getLabel());
    readFederateHandleSet(value.getFederateHandleSet());
  }

  void readEnableTimeRegulationRequestMessage(EnableTimeRegulationRequestMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readTimeStamp(value.getTimeStamp());
  }

  void readEnableTimeRegulationResponseMessage(EnableTimeRegulationResponseMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readFederateHandle(value.getRespondingFederateHandle());
    readBool(value.getTimeStampValid());
    readTimeStamp(value.getTimeStamp());
  }

  void readDisableTimeRegulationRequestMessage(DisableTimeRegulationRequestMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
  }

  void readCommitLowerBoundTimeStampMessage(CommitLowerBoundTimeStampMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readTimeStamp(value.getTimeStamp());
  }

  void readTimeConstrainedEnabledMessage(TimeConstrainedEnabledMessage& value)
  {
    readVariableLengthData(value.getLogicalTime());
  }

  void readTimeRegulationEnabledMessage(TimeRegulationEnabledMessage& value)
  {
    readVariableLengthData(value.getLogicalTime());
  }

  void readTimeAdvanceGrantedMessage(TimeAdvanceGrantedMessage& value)
  {
    readVariableLengthData(value.getLogicalTime());
  }

  void readChangeInteractionClassPublicationMessage(ChangeInteractionClassPublicationMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readPublicationType(value.getPublicationType());
    readInteractionClassHandle(value.getInteractionClassHandle());
  }

  void readChangeObjectClassPublicationMessage(ChangeObjectClassPublicationMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readPublicationType(value.getPublicationType());
    readObjectClassHandle(value.getObjectClassHandle());
    readAttributeHandleVector(value.getAttributeHandles());
  }

  void readChangeInteractionClassSubscriptionMessage(ChangeInteractionClassSubscriptionMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readSubscriptionType(value.getSubscriptionType());
    readInteractionClassHandle(value.getInteractionClassHandle());
  }

  void readChangeObjectClassSubscriptionMessage(ChangeObjectClassSubscriptionMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readSubscriptionType(value.getSubscriptionType());
    readObjectClassHandle(value.getObjectClassHandle());
    readAttributeHandleVector(value.getAttributeHandles());
  }

  void readRegistrationForObjectClassMessage(RegistrationForObjectClassMessage& value)
  {
    readObjectClassHandle(value.getObjectClassHandle());
    readBool(value.getStart());
  }

  void readTurnInteractionsOnMessage(TurnInteractionsOnMessage& value)
  {
    readInteractionClassHandle(value.getInteractionClassHandle());
    readBool(value.getOn());
  }

  void readInteractionMessage(InteractionMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readInteractionClassHandle(value.getInteractionClassHandle());
    readTransportationType(value.getTransportationType());
    readVariableLengthData(value.getTag());
    readParameterValueVector(value.getParameterValues());
  }

  void readTimeStampedInteractionMessage(TimeStampedInteractionMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readInteractionClassHandle(value.getInteractionClassHandle());
    readTransportationType(value.getTransportationType());
    readVariableLengthData(value.getTag());
    readVariableLengthData(value.getTimeStamp());
    readMessageRetractionHandle(value.getMessageRetractionHandle());
    readParameterValueVector(value.getParameterValues());
  }

  void readObjectInstanceHandlesRequestMessage(ObjectInstanceHandlesRequestMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readUnsigned(value.getCount());
  }

  void readObjectInstanceHandlesResponseMessage(ObjectInstanceHandlesResponseMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readObjectInstanceHandleNamePairVector(value.getObjectInstanceHandleNamePairVector());
  }

  void readReleaseMultipleObjectInstanceNameHandlePairsMessage(ReleaseMultipleObjectInstanceNameHandlePairsMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readObjectInstanceHandleVector(value.getObjectInstanceHandleVector());
  }

  void readReserveObjectInstanceNameRequestMessage(ReserveObjectInstanceNameRequestMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readString(value.getName());
  }

  void readReserveObjectInstanceNameResponseMessage(ReserveObjectInstanceNameResponseMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readObjectInstanceHandleNamePair(value.getObjectInstanceHandleNamePair());
    readBool(value.getSuccess());
  }

  void readReserveMultipleObjectInstanceNameRequestMessage(ReserveMultipleObjectInstanceNameRequestMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readStringVector(value.getNameList());
  }

  void readReserveMultipleObjectInstanceNameResponseMessage(ReserveMultipleObjectInstanceNameResponseMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readFederateHandle(value.getFederateHandle());
    readObjectInstanceHandleNamePairVector(value.getObjectInstanceHandleNamePairVector());
    readBool(value.getSuccess());
  }

  void readInsertObjectInstanceMessage(InsertObjectInstanceMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readObjectClassHandle(value.getObjectClassHandle());
    readObjectInstanceHandle(value.getObjectInstanceHandle());
    readString(value.getName());
    readAttributeStateVector(value.getAttributeStateVector());
  }

  void readDeleteObjectInstanceMessage(DeleteObjectInstanceMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readObjectInstanceHandle(value.getObjectInstanceHandle());
    readVariableLengthData(value.getTag());
  }

  void readTimeStampedDeleteObjectInstanceMessage(TimeStampedDeleteObjectInstanceMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readObjectInstanceHandle(value.getObjectInstanceHandle());
    readVariableLengthData(value.getTag());
    readVariableLengthData(value.getTimeStamp());
    readMessageRetractionHandle(value.getMessageRetractionHandle());
  }

  void readAttributeUpdateMessage(AttributeUpdateMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readObjectInstanceHandle(value.getObjectInstanceHandle());
    readVariableLengthData(value.getTag());
    readTransportationType(value.getTransportationType());
    readAttributeValueVector(value.getAttributeValues());
  }

  void readTimeStampedAttributeUpdateMessage(TimeStampedAttributeUpdateMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readObjectInstanceHandle(value.getObjectInstanceHandle());
    readVariableLengthData(value.getTag());
    readVariableLengthData(value.getTimeStamp());
    readMessageRetractionHandle(value.getMessageRetractionHandle());
    readTransportationType(value.getTransportationType());
    readAttributeValueVector(value.getAttributeValues());
  }

  void readRequestAttributeUpdateMessage(RequestAttributeUpdateMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readObjectInstanceHandle(value.getObjectInstanceHandle());
    readAttributeHandleVector(value.getAttributeHandles());
    readVariableLengthData(value.getTag());
  }

  void readRequestClassAttributeUpdateMessage(RequestClassAttributeUpdateMessage& value)
  {
    readFederationHandle(value.getFederationHandle());
    readObjectClassHandle(value.getObjectClassHandle());
    readAttributeHandleVector(value.getAttributeHandles());
    readVariableLengthData(value.getTag());
  }

  NetworkBuffer& _networkBuffer;
};

class OPENRTI_LOCAL TightBE1MessageDecoder::PayloadDecoder {
public:
  PayloadDecoder(const NetworkBuffer& networkBuffer) :
    _networkBuffer(networkBuffer),
    _index(1)
  { }
  void readPayloadCallbackModel(CallbackModel& value)
  {
  }

  void readPayloadOrderType(OrderType& value)
  {
  }

  void readPayloadTransportationType(TransportationType& value)
  {
  }

  void readPayloadSubscriptionType(SubscriptionType& value)
  {
  }

  void readPayloadPublicationType(PublicationType& value)
  {
  }

  void readPayloadResignAction(ResignAction& value)
  {
  }

  void readPayloadRestoreFailureReason(RestoreFailureReason& value)
  {
  }

  void readPayloadRestoreStatus(RestoreStatus& value)
  {
  }

  void readPayloadSaveFailureReason(SaveFailureReason& value)
  {
  }

  void readPayloadSaveStatus(SaveStatus& value)
  {
  }

  void readPayloadServiceGroupIndicator(ServiceGroupIndicator& value)
  {
  }

  void readPayloadBool(const bool& value)
  {
  }

  void readPayloadString(const std::wstring& value)
  {
  }

  void readPayloadUnsigned(const unsigned& value)
  {
  }

  void readPayloadSizeType(const size_t& value)
  {
  }

  void readPayloadFederationHandle(const FederationHandle& value)
  {
  }

  void readPayloadFOMModuleHandle(const FOMModuleHandle& value)
  {
  }

  void readPayloadAttributeHandle(const AttributeHandle& value)
  {
  }

  void readPayloadDimensionHandle(const DimensionHandle& value)
  {
  }

  void readPayloadObjectClassHandle(const ObjectClassHandle& value)
  {
  }

  void readPayloadObjectInstanceHandle(const ObjectInstanceHandle& value)
  {
  }

  void readPayloadInteractionClassHandle(const InteractionClassHandle& value)
  {
  }

  void readPayloadParameterHandle(const ParameterHandle& value)
  {
  }

  void readPayloadFederateHandle(const FederateHandle& value)
  {
  }

  void readPayloadSpaceHandle(const SpaceHandle& value)
  {
  }

  void readPayloadTransportationHandle(const TransportationHandle& value)
  {
  }

  void readPayloadOrderingHandle(const OrderingHandle& value)
  {
  }

  void readPayloadMessageRetractionHandle(const MessageRetractionHandle& value)
  {
  }

  void readPayloadRegionHandle(const RegionHandle& value)
  {
  }

  void readPayloadAttributeHandleVector(AttributeHandleVector& value)
  {
    for (AttributeHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadAttributeHandle(*i);
    }
  }

  void readPayloadFederateHandleSet(FederateHandleSet& value)
  {
    for (FederateHandleSet::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFederateHandle(*i);
    }
  }

  void readPayloadFederateHandleVector(FederateHandleVector& value)
  {
    for (FederateHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFederateHandle(*i);
    }
  }

  void readPayloadParameterHandleVector(ParameterHandleVector& value)
  {
    for (ParameterHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadParameterHandle(*i);
    }
  }

  void readPayloadDimensionHandleVector(DimensionHandleVector& value)
  {
    for (DimensionHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadDimensionHandle(*i);
    }
  }

  void readPayloadDimensionHandleSet(DimensionHandleSet& value)
  {
    for (DimensionHandleSet::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadDimensionHandle(*i);
    }
  }

  void readPayloadObjectInstanceHandleVector(ObjectInstanceHandleVector& value)
  {
    for (ObjectInstanceHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadObjectInstanceHandle(*i);
    }
  }

  void readPayloadFOMModuleHandleVector(FOMModuleHandleVector& value)
  {
    for (FOMModuleHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMModuleHandle(*i);
    }
  }

  void readPayloadFOMModuleHandleSet(FOMModuleHandleSet& value)
  {
    for (FOMModuleHandleSet::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMModuleHandle(*i);
    }
  }

  void readPayloadStringVector(StringVector& value)
  {
    for (StringVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadString(*i);
    }
  }

  void readPayloadStringSet(StringSet& value)
  {
    for (StringSet::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadString(*i);
    }
  }

  void readPayloadVariableLengthData(VariableLengthData& value)
  {
    if (!value.size())
      return;
    value = _networkBuffer[++_index];
  }

  void readPayloadRangeBoundsValue(RangeBoundsValue& value)
  {
    readPayloadUnsigned(value.getLowerBound());
    readPayloadUnsigned(value.getUpperBound());
  }

  void readPayloadDimensionHandleRangeBoundsValuePair(DimensionHandleRangeBoundsValuePair& value)
  {
    readPayloadDimensionHandle(value.first);
    readPayloadRangeBoundsValue(value.second);
  }

  void readPayloadRegionValue(RegionValue& value)
  {
    for (RegionValue::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadDimensionHandleRangeBoundsValuePair(*i);
    }
  }

  void readPayloadRegionValueList(RegionValueList& value)
  {
    for (RegionValueList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadRegionValue(*i);
    }
  }

  void readPayloadInteractionClassHandleRegionValueListPair(InteractionClassHandleRegionValueListPair& value)
  {
    readPayloadInteractionClassHandle(value.first);
    readPayloadRegionValueList(value.second);
  }

  void readPayloadAttributeHandleRegionValueListPair(AttributeHandleRegionValueListPair& value)
  {
    readPayloadAttributeHandle(value.first);
    readPayloadRegionValueList(value.second);
  }

  void readPayloadAttributeState(AttributeState& value)
  {
    readPayloadAttributeHandle(value.getAttributeHandle());
  }

  void readPayloadAttributeStateVector(AttributeStateVector& value)
  {
    for (AttributeStateVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadAttributeState(*i);
    }
  }

  void readPayloadParameterValue(ParameterValue& value)
  {
    readPayloadParameterHandle(value.getParameterHandle());
    readPayloadVariableLengthData(value.getValue());
  }

  void readPayloadParameterValueVector(ParameterValueVector& value)
  {
    for (ParameterValueVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadParameterValue(*i);
    }
  }

  void readPayloadAttributeValue(AttributeValue& value)
  {
    readPayloadAttributeHandle(value.getAttributeHandle());
    readPayloadVariableLengthData(value.getValue());
  }

  void readPayloadAttributeValueVector(AttributeValueVector& value)
  {
    for (AttributeValueVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadAttributeValue(*i);
    }
  }

  void readPayloadTimeStamp(TimeStamp& value)
  {
    readPayloadVariableLengthData(value.getLogicalTime());
    readPayloadBool(value.getZeroLookahead());
  }

  void readPayloadFederateHandleTimeStampMap(FederateHandleTimeStampMap& value)
  {
    for (FederateHandleTimeStampMap::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFederateHandle(i->first);
      readPayloadTimeStamp(i->second);
    }
  }

  void readPayloadFederateHandleSaveStatusPair(FederateHandleSaveStatusPair& value)
  {
    readPayloadFederateHandle(value.first);
    readPayloadSaveStatus(value.second);
  }

  void readPayloadFederateHandleSaveStatusPairVector(FederateHandleSaveStatusPairVector& value)
  {
    for (FederateHandleSaveStatusPairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFederateHandleSaveStatusPair(*i);
    }
  }

  void readPayloadFederateHandleRestoreStatusPair(FederateHandleRestoreStatusPair& value)
  {
    readPayloadFederateHandle(value.first);
    readPayloadRestoreStatus(value.second);
  }

  void readPayloadFederateHandleRestoreStatusPairVector(FederateHandleRestoreStatusPairVector& value)
  {
    for (FederateHandleRestoreStatusPairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFederateHandleRestoreStatusPair(*i);
    }
  }

  void readPayloadFederationExecutionInformation(FederationExecutionInformation& value)
  {
    readPayloadString(value.getFederationExecutionName());
    readPayloadString(value.getLogicalTimeFactoryName());
  }

  void readPayloadFederationExecutionInformationVector(FederationExecutionInformationVector& value)
  {
    for (FederationExecutionInformationVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFederationExecutionInformation(*i);
    }
  }

  void readPayloadObjectInstanceHandleNamePair(ObjectInstanceHandleNamePair& value)
  {
    readPayloadObjectInstanceHandle(value.first);
    readPayloadString(value.second);
  }

  void readPayloadObjectInstanceHandleNamePairVector(ObjectInstanceHandleNamePairVector& value)
  {
    for (ObjectInstanceHandleNamePairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadObjectInstanceHandleNamePair(*i);
    }
  }

  void readPayloadCreateFederationExecutionResponseType(CreateFederationExecutionResponseType& value)
  {
  }

  void readPayloadDestroyFederationExecutionResponseType(DestroyFederationExecutionResponseType& value)
  {
  }

  void readPayloadJoinFederationExecutionResponseType(JoinFederationExecutionResponseType& value)
  {
  }

  void readPayloadRegisterFederationSynchronizationPointResponseType(RegisterFederationSynchronizationPointResponseType& value)
  {
  }

  void readPayloadConfigurationParameterMap(ConfigurationParameterMap& value)
  {
    for (ConfigurationParameterMap::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadString(i->first);
      readPayloadStringVector(i->second);
    }
  }

  void readPayloadFOMStringTransportationType(FOMStringTransportationType& value)
  {
    readPayloadString(value.getName());
  }

  void readPayloadFOMStringTransportationTypeList(FOMStringTransportationTypeList& value)
  {
    for (FOMStringTransportationTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMStringTransportationType(*i);
    }
  }

  void readPayloadFOMStringDimension(FOMStringDimension& value)
  {
    readPayloadString(value.getName());
    readPayloadUnsigned(value.getUpperBound());
  }

  void readPayloadFOMStringDimensionList(FOMStringDimensionList& value)
  {
    for (FOMStringDimensionList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMStringDimension(*i);
    }
  }

  void readPayloadFOMStringRoutingSpace(FOMStringRoutingSpace& value)
  {
    readPayloadString(value.getName());
    readPayloadStringSet(value.getDimensionSet());
  }

  void readPayloadFOMStringRoutingSpaceList(FOMStringRoutingSpaceList& value)
  {
    for (FOMStringRoutingSpaceList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMStringRoutingSpace(*i);
    }
  }

  void readPayloadFOMStringParameter(FOMStringParameter& value)
  {
    readPayloadString(value.getName());
  }

  void readPayloadFOMStringParameterList(FOMStringParameterList& value)
  {
    for (FOMStringParameterList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMStringParameter(*i);
    }
  }

  void readPayloadFOMStringInteractionClass(FOMStringInteractionClass& value)
  {
    readPayloadString(value.getName());
    readPayloadString(value.getParentName());
    readPayloadString(value.getOrderType());
    readPayloadString(value.getTransportationType());
    readPayloadString(value.getRoutingSpace());
    readPayloadStringSet(value.getDimensionSet());
    readPayloadFOMStringParameterList(value.getParameterList());
  }

  void readPayloadFOMStringInteractionClassList(FOMStringInteractionClassList& value)
  {
    for (FOMStringInteractionClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMStringInteractionClass(*i);
    }
  }

  void readPayloadFOMStringAttribute(FOMStringAttribute& value)
  {
    readPayloadString(value.getName());
    readPayloadString(value.getOrderType());
    readPayloadString(value.getTransportationType());
    readPayloadString(value.getRoutingSpace());
    readPayloadStringSet(value.getDimensionSet());
  }

  void readPayloadFOMStringAttributeList(FOMStringAttributeList& value)
  {
    for (FOMStringAttributeList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMStringAttribute(*i);
    }
  }

  void readPayloadFOMStringObjectClass(FOMStringObjectClass& value)
  {
    readPayloadString(value.getName());
    readPayloadString(value.getParentName());
    readPayloadFOMStringAttributeList(value.getAttributeList());
  }

  void readPayloadFOMStringObjectClassList(FOMStringObjectClassList& value)
  {
    for (FOMStringObjectClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMStringObjectClass(*i);
    }
  }

  void readPayloadFOMStringModule(FOMStringModule& value)
  {
    readPayloadFOMStringTransportationTypeList(value.getTransportationTypeList());
    readPayloadFOMStringDimensionList(value.getDimensionList());
    readPayloadFOMStringRoutingSpaceList(value.getRoutingSpaceList());
    readPayloadFOMStringInteractionClassList(value.getInteractionClassList());
    readPayloadFOMStringObjectClassList(value.getObjectClassList());
  }

  void readPayloadFOMStringModuleList(FOMStringModuleList& value)
  {
    for (FOMStringModuleList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMStringModule(*i);
    }
  }

  void readPayloadFOMTransportationType(FOMTransportationType& value)
  {
    readPayloadString(value.getName());
    readPayloadTransportationType(value.getTransportationType());
  }

  void readPayloadFOMTransportationTypeList(FOMTransportationTypeList& value)
  {
    for (FOMTransportationTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMTransportationType(*i);
    }
  }

  void readPayloadFOMTransportationTypeMap(FOMTransportationTypeMap& value)
  {
    for (FOMTransportationTypeMap::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadString(i->first);
      readPayloadFOMTransportationType(i->second);
    }
  }

  void readPayloadFOMDimension(FOMDimension& value)
  {
    readPayloadString(value.getName());
    readPayloadDimensionHandle(value.getDimensionHandle());
    readPayloadUnsigned(value.getUpperBound());
  }

  void readPayloadFOMDimensionList(FOMDimensionList& value)
  {
    for (FOMDimensionList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMDimension(*i);
    }
  }

  void readPayloadFOMDimensionMap(FOMDimensionMap& value)
  {
    for (FOMDimensionMap::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadString(i->first);
      readPayloadFOMDimension(i->second);
    }
  }

  void readPayloadFOMRoutingSpace(FOMRoutingSpace& value)
  {
    readPayloadString(value.getName());
    readPayloadSpaceHandle(value.getSpaceHandle());
    readPayloadDimensionHandleSet(value.getDimensionHandleSet());
  }

  void readPayloadFOMRoutingSpaceList(FOMRoutingSpaceList& value)
  {
    for (FOMRoutingSpaceList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMRoutingSpace(*i);
    }
  }

  void readPayloadFOMRoutingSpaceMap(FOMRoutingSpaceMap& value)
  {
    for (FOMRoutingSpaceMap::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadString(i->first);
      readPayloadFOMRoutingSpace(i->second);
    }
  }

  void readPayloadFOMParameter(FOMParameter& value)
  {
    readPayloadString(value.getName());
    readPayloadParameterHandle(value.getParameterHandle());
  }

  void readPayloadFOMParameterList(FOMParameterList& value)
  {
    for (FOMParameterList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMParameter(*i);
    }
  }

  void readPayloadFOMParameterMap(FOMParameterMap& value)
  {
    for (FOMParameterMap::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadString(i->first);
      readPayloadFOMParameter(i->second);
    }
  }

  void readPayloadFOMInteractionClass(FOMInteractionClass& value)
  {
    readPayloadString(value.getName());
    readPayloadInteractionClassHandle(value.getInteractionClassHandle());
    readPayloadInteractionClassHandle(value.getParentInteractionClassHandle());
    readPayloadOrderType(value.getOrderType());
    readPayloadTransportationType(value.getTransportationType());
    readPayloadDimensionHandleSet(value.getDimensionHandleSet());
    readPayloadFOMParameterList(value.getParameterList());
  }

  void readPayloadFOMInteractionClassList(FOMInteractionClassList& value)
  {
    for (FOMInteractionClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMInteractionClass(*i);
    }
  }

  void readPayloadFOMAttribute(FOMAttribute& value)
  {
    readPayloadString(value.getName());
    readPayloadAttributeHandle(value.getAttributeHandle());
    readPayloadOrderType(value.getOrderType());
    readPayloadTransportationType(value.getTransportationType());
    readPayloadDimensionHandleSet(value.getDimensionHandleSet());
  }

  void readPayloadFOMAttributeList(FOMAttributeList& value)
  {
    for (FOMAttributeList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMAttribute(*i);
    }
  }

  void readPayloadFOMObjectClass(FOMObjectClass& value)
  {
    readPayloadString(value.getName());
    readPayloadObjectClassHandle(value.getObjectClassHandle());
    readPayloadObjectClassHandle(value.getParentObjectClassHandle());
    readPayloadFOMAttributeList(value.getAttributeList());
  }

  void readPayloadFOMObjectClassList(FOMObjectClassList& value)
  {
    for (FOMObjectClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMObjectClass(*i);
    }
  }

  void readPayloadFOMModule(FOMModule& value)
  {
    readPayloadFOMModuleHandle(value.getFOMModuleHandle());
    readPayloadFOMModuleHandleSet(value.getRequiredFOMModuleHandleSet());
    readPayloadFOMTransportationTypeList(value.getTransportationTypeList());
    readPayloadFOMDimensionList(value.getDimensionList());
    readPayloadFOMRoutingSpaceList(value.getRoutingSpaceList());
    readPayloadFOMInteractionClassList(value.getInteractionClassList());
    readPayloadFOMObjectClassList(value.getObjectClassList());
  }

  void readPayloadFOMModuleList(FOMModuleList& value)
  {
    for (FOMModuleList::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadFOMModule(*i);
    }
  }

  void readPayloadConnectionLostMessage(ConnectionLostMessage& value)
  {
    readPayloadString(value.getFaultDescription());
  }

  void readPayloadCreateFederationExecutionRequestMessage(CreateFederationExecutionRequestMessage& value)
  {
    readPayloadString(value.getFederationExecution());
    readPayloadString(value.getLogicalTimeFactoryName());
    readPayloadStringVector(value.getFOMModuleFileList());
    readPayloadFOMStringModuleList(value.getFOMStringModuleList());
  }

  void readPayloadCreateFederationExecutionResponseMessage(CreateFederationExecutionResponseMessage& value)
  {
    readPayloadCreateFederationExecutionResponseType(value.getCreateFederationExecutionResponseType());
    readPayloadString(value.getExceptionString());
  }

  void readPayloadDestroyFederationExecutionRequestMessage(DestroyFederationExecutionRequestMessage& value)
  {
    readPayloadString(value.getFederationExecution());
  }

  void readPayloadDestroyFederationExecutionResponseMessage(DestroyFederationExecutionResponseMessage& value)
  {
    readPayloadDestroyFederationExecutionResponseType(value.getDestroyFederationExecutionResponseType());
  }

  void readPayloadEnumerateFederationExecutionsRequestMessage(EnumerateFederationExecutionsRequestMessage& value)
  {
  }

  void readPayloadEnumerateFederationExecutionsResponseMessage(EnumerateFederationExecutionsResponseMessage& value)
  {
    readPayloadFederationExecutionInformationVector(value.getFederationExecutionInformationVector());
  }

  void readPayloadInsertFederationExecutionMessage(InsertFederationExecutionMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadString(value.getFederationName());
    readPayloadString(value.getLogicalTimeFactoryName());
    readPayloadConfigurationParameterMap(value.getConfigurationParameterMap());
    readPayloadFOMModuleList(value.getFOMModuleList());
  }

  void readPayloadShutdownFederationExecutionMessage(ShutdownFederationExecutionMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
  }

  void readPayloadEraseFederationExecutionMessage(EraseFederationExecutionMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
  }

  void readPayloadReleaseFederationHandleMessage(ReleaseFederationHandleMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
  }

  void readPayloadJoinFederationExecutionRequestMessage(JoinFederationExecutionRequestMessage& value)
  {
    readPayloadString(value.getFederationExecution());
    readPayloadString(value.getFederateType());
    readPayloadString(value.getFederateName());
    readPayloadFOMStringModuleList(value.getFOMStringModuleList());
    readPayloadConfigurationParameterMap(value.getConfigurationParameterMap());
  }

  void readPayloadJoinFederationExecutionResponseMessage(JoinFederationExecutionResponseMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadJoinFederationExecutionResponseType(value.getJoinFederationExecutionResponseType());
    readPayloadString(value.getExceptionString());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadString(value.getFederateType());
    readPayloadString(value.getFederateName());
    readPayloadFOMModuleHandleVector(value.getFOMModuleHandleList());
  }

  void readPayloadResignFederationExecutionRequestMessage(ResignFederationExecutionRequestMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
  }

  void readPayloadJoinFederateNotifyMessage(JoinFederateNotifyMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadString(value.getFederateType());
    readPayloadString(value.getFederateName());
  }

  void readPayloadResignFederateNotifyMessage(ResignFederateNotifyMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
  }

  void readPayloadRegisterFederationSynchronizationPointMessage(RegisterFederationSynchronizationPointMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadString(value.getLabel());
    readPayloadVariableLengthData(value.getTag());
    readPayloadFederateHandleSet(value.getFederateHandleSet());
  }

  void readPayloadRegisterFederationSynchronizationPointResponseMessage(RegisterFederationSynchronizationPointResponseMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadString(value.getLabel());
    readPayloadRegisterFederationSynchronizationPointResponseType(value.getRegisterFederationSynchronizationPointResponseType());
  }

  void readPayloadAnnounceSynchronizationPointMessage(AnnounceSynchronizationPointMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadString(value.getLabel());
    readPayloadVariableLengthData(value.getTag());
    readPayloadBool(value.getAddJoiningFederates());
    readPayloadFederateHandleSet(value.getFederateHandleSet());
  }

  void readPayloadSynchronizationPointAchievedMessage(SynchronizationPointAchievedMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadString(value.getLabel());
    readPayloadFederateHandleSet(value.getFederateHandleSet());
  }

  void readPayloadFederationSynchronizedMessage(FederationSynchronizedMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadString(value.getLabel());
    readPayloadFederateHandleSet(value.getFederateHandleSet());
  }

  void readPayloadEnableTimeRegulationRequestMessage(EnableTimeRegulationRequestMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadTimeStamp(value.getTimeStamp());
  }

  void readPayloadEnableTimeRegulationResponseMessage(EnableTimeRegulationResponseMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadFederateHandle(value.getRespondingFederateHandle());
    readPayloadBool(value.getTimeStampValid());
    readPayloadTimeStamp(value.getTimeStamp());
  }

  void readPayloadDisableTimeRegulationRequestMessage(DisableTimeRegulationRequestMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
  }

  void readPayloadCommitLowerBoundTimeStampMessage(CommitLowerBoundTimeStampMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadTimeStamp(value.getTimeStamp());
  }

  void readPayloadTimeConstrainedEnabledMessage(TimeConstrainedEnabledMessage& value)
  {
    readPayloadVariableLengthData(value.getLogicalTime());
  }

  void readPayloadTimeRegulationEnabledMessage(TimeRegulationEnabledMessage& value)
  {
    readPayloadVariableLengthData(value.getLogicalTime());
  }

  void readPayloadTimeAdvanceGrantedMessage(TimeAdvanceGrantedMessage& value)
  {
    readPayloadVariableLengthData(value.getLogicalTime());
  }

  void readPayloadChangeInteractionClassPublicationMessage(ChangeInteractionClassPublicationMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadPublicationType(value.getPublicationType());
    readPayloadInteractionClassHandle(value.getInteractionClassHandle());
  }

  void readPayloadChangeObjectClassPublicationMessage(ChangeObjectClassPublicationMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadPublicationType(value.getPublicationType());
    readPayloadObjectClassHandle(value.getObjectClassHandle());
    readPayloadAttributeHandleVector(value.getAttributeHandles());
  }

  void readPayloadChangeInteractionClassSubscriptionMessage(ChangeInteractionClassSubscriptionMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadSubscriptionType(value.getSubscriptionType());
    readPayloadInteractionClassHandle(value.getInteractionClassHandle());
  }

  void readPayloadChangeObjectClassSubscriptionMessage(ChangeObjectClassSubscriptionMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadSubscriptionType(value.getSubscriptionType());
    readPayloadObjectClassHandle(value.getObjectClassHandle());
    readPayloadAttributeHandleVector(value.getAttributeHandles());
  }

  void readPayloadRegistrationForObjectClassMessage(RegistrationForObjectClassMessage& value)
  {
    readPayloadObjectClassHandle(value.getObjectClassHandle());
    readPayloadBool(value.getStart());
  }

  void readPayloadTurnInteractionsOnMessage(TurnInteractionsOnMessage& value)
  {
    readPayloadInteractionClassHandle(value.getInteractionClassHandle());
    readPayloadBool(value.getOn());
  }

  void readPayloadInteractionMessage(InteractionMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadInteractionClassHandle(value.getInteractionClassHandle());
    readPayloadTransportationType(value.getTransportationType());
    readPayloadVariableLengthData(value.getTag());
    readPayloadParameterValueVector(value.getParameterValues());
  }

  void readPayloadTimeStampedInteractionMessage(TimeStampedInteractionMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadInteractionClassHandle(value.getInteractionClassHandle());
    readPayloadTransportationType(value.getTransportationType());
    readPayloadVariableLengthData(value.getTag());
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadMessageRetractionHandle(value.getMessageRetractionHandle());
    readPayloadParameterValueVector(value.getParameterValues());
  }

  void readPayloadObjectInstanceHandlesRequestMessage(ObjectInstanceHandlesRequestMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadUnsigned(value.getCount());
  }

  void readPayloadObjectInstanceHandlesResponseMessage(ObjectInstanceHandlesResponseMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadObjectInstanceHandleNamePairVector(value.getObjectInstanceHandleNamePairVector());
  }

  void readPayloadReleaseMultipleObjectInstanceNameHandlePairsMessage(ReleaseMultipleObjectInstanceNameHandlePairsMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadObjectInstanceHandleVector(value.getObjectInstanceHandleVector());
  }

  void readPayloadReserveObjectInstanceNameRequestMessage(ReserveObjectInstanceNameRequestMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadString(value.getName());
  }

  void readPayloadReserveObjectInstanceNameResponseMessage(ReserveObjectInstanceNameResponseMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadObjectInstanceHandleNamePair(value.getObjectInstanceHandleNamePair());
    readPayloadBool(value.getSuccess());
  }

  void readPayloadReserveMultipleObjectInstanceNameRequestMessage(ReserveMultipleObjectInstanceNameRequestMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadStringVector(value.getNameList());
  }

  void readPayloadReserveMultipleObjectInstanceNameResponseMessage(ReserveMultipleObjectInstanceNameResponseMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadFederateHandle(value.getFederateHandle());
    readPayloadObjectInstanceHandleNamePairVector(value.getObjectInstanceHandleNamePairVector());
    readPayloadBool(value.getSuccess());
  }

  void readPayloadInsertObjectInstanceMessage(InsertObjectInstanceMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadObjectClassHandle(value.getObjectClassHandle());
    readPayloadObjectInstanceHandle(value.getObjectInstanceHandle());
    readPayloadString(value.getName());
    readPayloadAttributeStateVector(value.getAttributeStateVector());
  }

  void readPayloadDeleteObjectInstanceMessage(DeleteObjectInstanceMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadObjectInstanceHandle(value.getObjectInstanceHandle());
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadTimeStampedDeleteObjectInstanceMessage(TimeStampedDeleteObjectInstanceMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadObjectInstanceHandle(value.getObjectInstanceHandle());
    readPayloadVariableLengthData(value.getTag());
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadMessageRetractionHandle(value.getMessageRetractionHandle());
  }

  void readPayloadAttributeUpdateMessage(AttributeUpdateMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadObjectInstanceHandle(value.getObjectInstanceHandle());
    readPayloadVariableLengthData(value.getTag());
    readPayloadTransportationType(value.getTransportationType());
    readPayloadAttributeValueVector(value.getAttributeValues());
  }

  void readPayloadTimeStampedAttributeUpdateMessage(TimeStampedAttributeUpdateMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadObjectInstanceHandle(value.getObjectInstanceHandle());
    readPayloadVariableLengthData(value.getTag());
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadMessageRetractionHandle(value.getMessageRetractionHandle());
    readPayloadTransportationType(value.getTransportationType());
    readPayloadAttributeValueVector(value.getAttributeValues());
  }

  void readPayloadRequestAttributeUpdateMessage(RequestAttributeUpdateMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadObjectInstanceHandle(value.getObjectInstanceHandle());
    readPayloadAttributeHandleVector(value.getAttributeHandles());
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadRequestClassAttributeUpdateMessage(RequestClassAttributeUpdateMessage& value)
  {
    readPayloadFederationHandle(value.getFederationHandle());
    readPayloadObjectClassHandle(value.getObjectClassHandle());
    readPayloadAttributeHandleVector(value.getAttributeHandles());
    readPayloadVariableLengthData(value.getTag());
  }

  const NetworkBuffer& _networkBuffer;
  size_t _index;
};

TightBE1MessageDecoder::TightBE1MessageDecoder()
{
}

TightBE1MessageDecoder::~TightBE1MessageDecoder()
{
}

const char*
TightBE1MessageDecoder::getName() const
{
  return "TightBE1";
}

SharedPtr<AbstractMessage>
TightBE1MessageDecoder::readMessage(NetworkBuffer& networkBuffer)
{
  switch (networkBuffer.size()) {
  case 0:
    networkBuffer.addScratchBuffer().resize(4);
    return 0;
  case 1:
    networkBuffer.addScratchBuffer().resize(networkBuffer[0].getUInt32BE(0));
    return 0;
  case 2:
    decodeBody(networkBuffer);
    break;
  default:
    decodePayload(networkBuffer);
    break;
  }

  if (!networkBuffer.complete())
    return 0;

  return SharedPtr<AbstractMessage>().swap(_message);
}

void
TightBE1MessageDecoder::decodePayload(const NetworkBuffer& networkBuffer)
{
  DecodeDataStream decodeStream(networkBuffer[1]);
  uint16_t opcode = decodeStream.readUInt16Compressed();
  PayloadDecoder payloadDecoder(networkBuffer);
  switch (opcode) {
  case 1:
    payloadDecoder.readPayloadConnectionLostMessage(static_cast<ConnectionLostMessage&>(*_message));
    break;
  case 2:
    payloadDecoder.readPayloadCreateFederationExecutionRequestMessage(static_cast<CreateFederationExecutionRequestMessage&>(*_message));
    break;
  case 3:
    payloadDecoder.readPayloadCreateFederationExecutionResponseMessage(static_cast<CreateFederationExecutionResponseMessage&>(*_message));
    break;
  case 4:
    payloadDecoder.readPayloadDestroyFederationExecutionRequestMessage(static_cast<DestroyFederationExecutionRequestMessage&>(*_message));
    break;
  case 5:
    payloadDecoder.readPayloadDestroyFederationExecutionResponseMessage(static_cast<DestroyFederationExecutionResponseMessage&>(*_message));
    break;
  case 6:
    payloadDecoder.readPayloadEnumerateFederationExecutionsRequestMessage(static_cast<EnumerateFederationExecutionsRequestMessage&>(*_message));
    break;
  case 7:
    payloadDecoder.readPayloadEnumerateFederationExecutionsResponseMessage(static_cast<EnumerateFederationExecutionsResponseMessage&>(*_message));
    break;
  case 8:
    payloadDecoder.readPayloadInsertFederationExecutionMessage(static_cast<InsertFederationExecutionMessage&>(*_message));
    break;
  case 9:
    payloadDecoder.readPayloadShutdownFederationExecutionMessage(static_cast<ShutdownFederationExecutionMessage&>(*_message));
    break;
  case 10:
    payloadDecoder.readPayloadEraseFederationExecutionMessage(static_cast<EraseFederationExecutionMessage&>(*_message));
    break;
  case 11:
    payloadDecoder.readPayloadReleaseFederationHandleMessage(static_cast<ReleaseFederationHandleMessage&>(*_message));
    break;
  case 12:
    payloadDecoder.readPayloadJoinFederationExecutionRequestMessage(static_cast<JoinFederationExecutionRequestMessage&>(*_message));
    break;
  case 13:
    payloadDecoder.readPayloadJoinFederationExecutionResponseMessage(static_cast<JoinFederationExecutionResponseMessage&>(*_message));
    break;
  case 14:
    payloadDecoder.readPayloadResignFederationExecutionRequestMessage(static_cast<ResignFederationExecutionRequestMessage&>(*_message));
    break;
  case 15:
    payloadDecoder.readPayloadJoinFederateNotifyMessage(static_cast<JoinFederateNotifyMessage&>(*_message));
    break;
  case 16:
    payloadDecoder.readPayloadResignFederateNotifyMessage(static_cast<ResignFederateNotifyMessage&>(*_message));
    break;
  case 30:
    payloadDecoder.readPayloadRegisterFederationSynchronizationPointMessage(static_cast<RegisterFederationSynchronizationPointMessage&>(*_message));
    break;
  case 31:
    payloadDecoder.readPayloadRegisterFederationSynchronizationPointResponseMessage(static_cast<RegisterFederationSynchronizationPointResponseMessage&>(*_message));
    break;
  case 32:
    payloadDecoder.readPayloadAnnounceSynchronizationPointMessage(static_cast<AnnounceSynchronizationPointMessage&>(*_message));
    break;
  case 33:
    payloadDecoder.readPayloadSynchronizationPointAchievedMessage(static_cast<SynchronizationPointAchievedMessage&>(*_message));
    break;
  case 34:
    payloadDecoder.readPayloadFederationSynchronizedMessage(static_cast<FederationSynchronizedMessage&>(*_message));
    break;
  case 40:
    payloadDecoder.readPayloadEnableTimeRegulationRequestMessage(static_cast<EnableTimeRegulationRequestMessage&>(*_message));
    break;
  case 41:
    payloadDecoder.readPayloadEnableTimeRegulationResponseMessage(static_cast<EnableTimeRegulationResponseMessage&>(*_message));
    break;
  case 42:
    payloadDecoder.readPayloadDisableTimeRegulationRequestMessage(static_cast<DisableTimeRegulationRequestMessage&>(*_message));
    break;
  case 43:
    payloadDecoder.readPayloadCommitLowerBoundTimeStampMessage(static_cast<CommitLowerBoundTimeStampMessage&>(*_message));
    break;
  case 50:
    payloadDecoder.readPayloadChangeInteractionClassPublicationMessage(static_cast<ChangeInteractionClassPublicationMessage&>(*_message));
    break;
  case 51:
    payloadDecoder.readPayloadChangeObjectClassPublicationMessage(static_cast<ChangeObjectClassPublicationMessage&>(*_message));
    break;
  case 52:
    payloadDecoder.readPayloadChangeInteractionClassSubscriptionMessage(static_cast<ChangeInteractionClassSubscriptionMessage&>(*_message));
    break;
  case 53:
    payloadDecoder.readPayloadChangeObjectClassSubscriptionMessage(static_cast<ChangeObjectClassSubscriptionMessage&>(*_message));
    break;
  case 80:
    payloadDecoder.readPayloadInteractionMessage(static_cast<InteractionMessage&>(*_message));
    break;
  case 81:
    payloadDecoder.readPayloadTimeStampedInteractionMessage(static_cast<TimeStampedInteractionMessage&>(*_message));
    break;
  case 60:
    payloadDecoder.readPayloadObjectInstanceHandlesRequestMessage(static_cast<ObjectInstanceHandlesRequestMessage&>(*_message));
    break;
  case 61:
    payloadDecoder.readPayloadObjectInstanceHandlesResponseMessage(static_cast<ObjectInstanceHandlesResponseMessage&>(*_message));
    break;
  case 62:
    payloadDecoder.readPayloadReleaseMultipleObjectInstanceNameHandlePairsMessage(static_cast<ReleaseMultipleObjectInstanceNameHandlePairsMessage&>(*_message));
    break;
  case 63:
    payloadDecoder.readPayloadReserveObjectInstanceNameRequestMessage(static_cast<ReserveObjectInstanceNameRequestMessage&>(*_message));
    break;
  case 64:
    payloadDecoder.readPayloadReserveObjectInstanceNameResponseMessage(static_cast<ReserveObjectInstanceNameResponseMessage&>(*_message));
    break;
  case 65:
    payloadDecoder.readPayloadReserveMultipleObjectInstanceNameRequestMessage(static_cast<ReserveMultipleObjectInstanceNameRequestMessage&>(*_message));
    break;
  case 66:
    payloadDecoder.readPayloadReserveMultipleObjectInstanceNameResponseMessage(static_cast<ReserveMultipleObjectInstanceNameResponseMessage&>(*_message));
    break;
  case 90:
    payloadDecoder.readPayloadInsertObjectInstanceMessage(static_cast<InsertObjectInstanceMessage&>(*_message));
    break;
  case 91:
    payloadDecoder.readPayloadDeleteObjectInstanceMessage(static_cast<DeleteObjectInstanceMessage&>(*_message));
    break;
  case 92:
    payloadDecoder.readPayloadTimeStampedDeleteObjectInstanceMessage(static_cast<TimeStampedDeleteObjectInstanceMessage&>(*_message));
    break;
  case 94:
    payloadDecoder.readPayloadAttributeUpdateMessage(static_cast<AttributeUpdateMessage&>(*_message));
    break;
  case 96:
    payloadDecoder.readPayloadTimeStampedAttributeUpdateMessage(static_cast<TimeStampedAttributeUpdateMessage&>(*_message));
    break;
  case 97:
    payloadDecoder.readPayloadRequestAttributeUpdateMessage(static_cast<RequestAttributeUpdateMessage&>(*_message));
    break;
  case 98:
    payloadDecoder.readPayloadRequestClassAttributeUpdateMessage(static_cast<RequestClassAttributeUpdateMessage&>(*_message));
    break;
  default:
    break;
  }
}

void
TightBE1MessageDecoder::decodeBody(NetworkBuffer& networkBuffer)
{
  DecodeStream decodeStream(networkBuffer[1], networkBuffer);
  uint16_t opcode = decodeStream.readUInt16Compressed();
  switch (opcode) {
  case 1:
    _message = new ConnectionLostMessage;
    decodeStream.readConnectionLostMessage(static_cast<ConnectionLostMessage&>(*_message));
    break;
  case 2:
    _message = new CreateFederationExecutionRequestMessage;
    decodeStream.readCreateFederationExecutionRequestMessage(static_cast<CreateFederationExecutionRequestMessage&>(*_message));
    break;
  case 3:
    _message = new CreateFederationExecutionResponseMessage;
    decodeStream.readCreateFederationExecutionResponseMessage(static_cast<CreateFederationExecutionResponseMessage&>(*_message));
    break;
  case 4:
    _message = new DestroyFederationExecutionRequestMessage;
    decodeStream.readDestroyFederationExecutionRequestMessage(static_cast<DestroyFederationExecutionRequestMessage&>(*_message));
    break;
  case 5:
    _message = new DestroyFederationExecutionResponseMessage;
    decodeStream.readDestroyFederationExecutionResponseMessage(static_cast<DestroyFederationExecutionResponseMessage&>(*_message));
    break;
  case 6:
    _message = new EnumerateFederationExecutionsRequestMessage;
    decodeStream.readEnumerateFederationExecutionsRequestMessage(static_cast<EnumerateFederationExecutionsRequestMessage&>(*_message));
    break;
  case 7:
    _message = new EnumerateFederationExecutionsResponseMessage;
    decodeStream.readEnumerateFederationExecutionsResponseMessage(static_cast<EnumerateFederationExecutionsResponseMessage&>(*_message));
    break;
  case 8:
    _message = new InsertFederationExecutionMessage;
    decodeStream.readInsertFederationExecutionMessage(static_cast<InsertFederationExecutionMessage&>(*_message));
    break;
  case 9:
    _message = new ShutdownFederationExecutionMessage;
    decodeStream.readShutdownFederationExecutionMessage(static_cast<ShutdownFederationExecutionMessage&>(*_message));
    break;
  case 10:
    _message = new EraseFederationExecutionMessage;
    decodeStream.readEraseFederationExecutionMessage(static_cast<EraseFederationExecutionMessage&>(*_message));
    break;
  case 11:
    _message = new ReleaseFederationHandleMessage;
    decodeStream.readReleaseFederationHandleMessage(static_cast<ReleaseFederationHandleMessage&>(*_message));
    break;
  case 12:
    _message = new JoinFederationExecutionRequestMessage;
    decodeStream.readJoinFederationExecutionRequestMessage(static_cast<JoinFederationExecutionRequestMessage&>(*_message));
    break;
  case 13:
    _message = new JoinFederationExecutionResponseMessage;
    decodeStream.readJoinFederationExecutionResponseMessage(static_cast<JoinFederationExecutionResponseMessage&>(*_message));
    break;
  case 14:
    _message = new ResignFederationExecutionRequestMessage;
    decodeStream.readResignFederationExecutionRequestMessage(static_cast<ResignFederationExecutionRequestMessage&>(*_message));
    break;
  case 15:
    _message = new JoinFederateNotifyMessage;
    decodeStream.readJoinFederateNotifyMessage(static_cast<JoinFederateNotifyMessage&>(*_message));
    break;
  case 16:
    _message = new ResignFederateNotifyMessage;
    decodeStream.readResignFederateNotifyMessage(static_cast<ResignFederateNotifyMessage&>(*_message));
    break;
  case 30:
    _message = new RegisterFederationSynchronizationPointMessage;
    decodeStream.readRegisterFederationSynchronizationPointMessage(static_cast<RegisterFederationSynchronizationPointMessage&>(*_message));
    break;
  case 31:
    _message = new RegisterFederationSynchronizationPointResponseMessage;
    decodeStream.readRegisterFederationSynchronizationPointResponseMessage(static_cast<RegisterFederationSynchronizationPointResponseMessage&>(*_message));
    break;
  case 32:
    _message = new AnnounceSynchronizationPointMessage;
    decodeStream.readAnnounceSynchronizationPointMessage(static_cast<AnnounceSynchronizationPointMessage&>(*_message));
    break;
  case 33:
    _message = new SynchronizationPointAchievedMessage;
    decodeStream.readSynchronizationPointAchievedMessage(static_cast<SynchronizationPointAchievedMessage&>(*_message));
    break;
  case 34:
    _message = new FederationSynchronizedMessage;
    decodeStream.readFederationSynchronizedMessage(static_cast<FederationSynchronizedMessage&>(*_message));
    break;
  case 40:
    _message = new EnableTimeRegulationRequestMessage;
    decodeStream.readEnableTimeRegulationRequestMessage(static_cast<EnableTimeRegulationRequestMessage&>(*_message));
    break;
  case 41:
    _message = new EnableTimeRegulationResponseMessage;
    decodeStream.readEnableTimeRegulationResponseMessage(static_cast<EnableTimeRegulationResponseMessage&>(*_message));
    break;
  case 42:
    _message = new DisableTimeRegulationRequestMessage;
    decodeStream.readDisableTimeRegulationRequestMessage(static_cast<DisableTimeRegulationRequestMessage&>(*_message));
    break;
  case 43:
    _message = new CommitLowerBoundTimeStampMessage;
    decodeStream.readCommitLowerBoundTimeStampMessage(static_cast<CommitLowerBoundTimeStampMessage&>(*_message));
    break;
  case 50:
    _message = new ChangeInteractionClassPublicationMessage;
    decodeStream.readChangeInteractionClassPublicationMessage(static_cast<ChangeInteractionClassPublicationMessage&>(*_message));
    break;
  case 51:
    _message = new ChangeObjectClassPublicationMessage;
    decodeStream.readChangeObjectClassPublicationMessage(static_cast<ChangeObjectClassPublicationMessage&>(*_message));
    break;
  case 52:
    _message = new ChangeInteractionClassSubscriptionMessage;
    decodeStream.readChangeInteractionClassSubscriptionMessage(static_cast<ChangeInteractionClassSubscriptionMessage&>(*_message));
    break;
  case 53:
    _message = new ChangeObjectClassSubscriptionMessage;
    decodeStream.readChangeObjectClassSubscriptionMessage(static_cast<ChangeObjectClassSubscriptionMessage&>(*_message));
    break;
  case 80:
    _message = new InteractionMessage;
    decodeStream.readInteractionMessage(static_cast<InteractionMessage&>(*_message));
    break;
  case 81:
    _message = new TimeStampedInteractionMessage;
    decodeStream.readTimeStampedInteractionMessage(static_cast<TimeStampedInteractionMessage&>(*_message));
    break;
  case 60:
    _message = new ObjectInstanceHandlesRequestMessage;
    decodeStream.readObjectInstanceHandlesRequestMessage(static_cast<ObjectInstanceHandlesRequestMessage&>(*_message));
    break;
  case 61:
    _message = new ObjectInstanceHandlesResponseMessage;
    decodeStream.readObjectInstanceHandlesResponseMessage(static_cast<ObjectInstanceHandlesResponseMessage&>(*_message));
    break;
  case 62:
    _message = new ReleaseMultipleObjectInstanceNameHandlePairsMessage;
    decodeStream.readReleaseMultipleObjectInstanceNameHandlePairsMessage(static_cast<ReleaseMultipleObjectInstanceNameHandlePairsMessage&>(*_message));
    break;
  case 63:
    _message = new ReserveObjectInstanceNameRequestMessage;
    decodeStream.readReserveObjectInstanceNameRequestMessage(static_cast<ReserveObjectInstanceNameRequestMessage&>(*_message));
    break;
  case 64:
    _message = new ReserveObjectInstanceNameResponseMessage;
    decodeStream.readReserveObjectInstanceNameResponseMessage(static_cast<ReserveObjectInstanceNameResponseMessage&>(*_message));
    break;
  case 65:
    _message = new ReserveMultipleObjectInstanceNameRequestMessage;
    decodeStream.readReserveMultipleObjectInstanceNameRequestMessage(static_cast<ReserveMultipleObjectInstanceNameRequestMessage&>(*_message));
    break;
  case 66:
    _message = new ReserveMultipleObjectInstanceNameResponseMessage;
    decodeStream.readReserveMultipleObjectInstanceNameResponseMessage(static_cast<ReserveMultipleObjectInstanceNameResponseMessage&>(*_message));
    break;
  case 90:
    _message = new InsertObjectInstanceMessage;
    decodeStream.readInsertObjectInstanceMessage(static_cast<InsertObjectInstanceMessage&>(*_message));
    break;
  case 91:
    _message = new DeleteObjectInstanceMessage;
    decodeStream.readDeleteObjectInstanceMessage(static_cast<DeleteObjectInstanceMessage&>(*_message));
    break;
  case 92:
    _message = new TimeStampedDeleteObjectInstanceMessage;
    decodeStream.readTimeStampedDeleteObjectInstanceMessage(static_cast<TimeStampedDeleteObjectInstanceMessage&>(*_message));
    break;
  case 94:
    _message = new AttributeUpdateMessage;
    decodeStream.readAttributeUpdateMessage(static_cast<AttributeUpdateMessage&>(*_message));
    break;
  case 96:
    _message = new TimeStampedAttributeUpdateMessage;
    decodeStream.readTimeStampedAttributeUpdateMessage(static_cast<TimeStampedAttributeUpdateMessage&>(*_message));
    break;
  case 97:
    _message = new RequestAttributeUpdateMessage;
    decodeStream.readRequestAttributeUpdateMessage(static_cast<RequestAttributeUpdateMessage&>(*_message));
    break;
  case 98:
    _message = new RequestClassAttributeUpdateMessage;
    decodeStream.readRequestClassAttributeUpdateMessage(static_cast<RequestClassAttributeUpdateMessage&>(*_message));
    break;
  default:
  break;
  }
}

} // namespace OpenRTI

/* -*-c++-*- OpenRTI - Copyright (C) 2009-2011 Mathias Froehlich
 *
 *
 * This file is part of OpenRTI.
 *
 * OpenRTI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * OpenRTI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OpenRTI.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This file is autogenerated by messagegen.py. Do not edit!
 *
 */


#include "TightBE1MessageEncoder.h"
#include "AbstractMessageEncoder.h"
#include "EncodeDataStream.h"
#include "Export.h"
#include "Message.h"

namespace OpenRTI {

class OPENRTI_LOCAL TightBE1MessageEncoder::EncodeStream : public EncodeDataStream {
public:
  EncodeStream(VariableLengthData& variableLengthData, NetworkBuffer& networkBuffer) :
    EncodeDataStream(variableLengthData),
    _networkBuffer(networkBuffer)
  { }
  void writeCallbackModel(const CallbackModel& value)
  {
    switch (value) {
    case HLA_IMMEDIATE:
      writeUInt32Compressed(0);
      break;
    case HLA_EVOKED:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeOrderType(const OrderType& value)
  {
    switch (value) {
    case RECEIVE:
      writeUInt32Compressed(0);
      break;
    case TIMESTAMP:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeTransportationType(const TransportationType& value)
  {
    switch (value) {
    case RELIABLE:
      writeUInt32Compressed(0);
      break;
    case BEST_EFFORT:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeSubscriptionType(const SubscriptionType& value)
  {
    switch (value) {
    case Unsubscribed:
      writeUInt32Compressed(0);
      break;
    case SubscribedPassive:
      writeUInt32Compressed(1);
      break;
    case SubscribedActive:
      writeUInt32Compressed(2);
      break;
    default:
      writeUInt32Compressed(3);
      break;
    }
  }

  void writePublicationType(const PublicationType& value)
  {
    switch (value) {
    case Unpublished:
      writeUInt32Compressed(0);
      break;
    case Published:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeResignAction(const ResignAction& value)
  {
    switch (value) {
    case UNCONDITIONALLY_DIVEST_ATTRIBUTES:
      writeUInt32Compressed(0);
      break;
    case DELETE_OBJECTS:
      writeUInt32Compressed(1);
      break;
    case CANCEL_PENDING_OWNERSHIP_ACQUISITIONS:
      writeUInt32Compressed(2);
      break;
    case DELETE_OBJECTS_THEN_DIVEST:
      writeUInt32Compressed(3);
      break;
    case CANCEL_THEN_DELETE_THEN_DIVEST:
      writeUInt32Compressed(4);
      break;
    case NO_ACTION:
      writeUInt32Compressed(5);
      break;
    default:
      writeUInt32Compressed(6);
      break;
    }
  }

  void writeRestoreFailureReason(const RestoreFailureReason& value)
  {
    switch (value) {
    case RTI_UNABLE_TO_RESTORE:
      writeUInt32Compressed(0);
      break;
    case FEDERATE_REPORTED_FAILURE_DURING_RESTORE:
      writeUInt32Compressed(1);
      break;
    case FEDERATE_RESIGNED_DURING_RESTORE:
      writeUInt32Compressed(2);
      break;
    case RTI_DETECTED_FAILURE_DURING_RESTORE:
      writeUInt32Compressed(3);
      break;
    default:
      writeUInt32Compressed(4);
      break;
    }
  }

  void writeRestoreStatus(const RestoreStatus& value)
  {
    switch (value) {
    case NO_RESTORE_IN_PROGRESS:
      writeUInt32Compressed(0);
      break;
    case FEDERATE_RESTORE_REQUEST_PENDING:
      writeUInt32Compressed(1);
      break;
    case FEDERATE_WAITING_FOR_RESTORE_TO_BEGIN:
      writeUInt32Compressed(2);
      break;
    case FEDERATE_PREPARED_TO_RESTORE:
      writeUInt32Compressed(3);
      break;
    case FEDERATE_RESTORING:
      writeUInt32Compressed(4);
      break;
    case FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE:
      writeUInt32Compressed(5);
      break;
    default:
      writeUInt32Compressed(6);
      break;
    }
  }

  void writeSaveFailureReason(const SaveFailureReason& value)
  {
    switch (value) {
    case RTI_UNABLE_TO_SAVE:
      writeUInt32Compressed(0);
      break;
    case FEDERATE_REPORTED_FAILURE_DURING_SAVE:
      writeUInt32Compressed(1);
      break;
    case FEDERATE_RESIGNED_DURING_SAVE:
      writeUInt32Compressed(2);
      break;
    case RTI_DETECTED_FAILURE_DURING_SAVE:
      writeUInt32Compressed(3);
      break;
    case SAVE_TIME_CANNOT_BE_HONORED:
      writeUInt32Compressed(4);
      break;
    default:
      writeUInt32Compressed(5);
      break;
    }
  }

  void writeSaveStatus(const SaveStatus& value)
  {
    switch (value) {
    case NO_SAVE_IN_PROGRESS:
      writeUInt32Compressed(0);
      break;
    case FEDERATE_INSTRUCTED_TO_SAVE:
      writeUInt32Compressed(1);
      break;
    case FEDERATE_SAVING:
      writeUInt32Compressed(2);
      break;
    case FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE:
      writeUInt32Compressed(3);
      break;
    default:
      writeUInt32Compressed(4);
      break;
    }
  }

  void writeServiceGroupIndicator(const ServiceGroupIndicator& value)
  {
    switch (value) {
    case FEDERATION_MANAGEMENT:
      writeUInt32Compressed(0);
      break;
    case DECLARATION_MANAGEMENT:
      writeUInt32Compressed(1);
      break;
    case OBJECT_MANAGEMENT:
      writeUInt32Compressed(2);
      break;
    case OWNERSHIP_MANAGEMENT:
      writeUInt32Compressed(3);
      break;
    case TIME_MANAGEMENT:
      writeUInt32Compressed(4);
      break;
    case DATA_DISTRIBUTION_MANAGEMENT:
      writeUInt32Compressed(5);
      break;
    case SUPPORT_SERVICES:
      writeUInt32Compressed(6);
      break;
    default:
      writeUInt32Compressed(7);
      break;
    }
  }

  void writeBool(const bool& value)
  {
    writeBoolCompressed(value);
  }

  void writeString(const std::string& value)
  {
    writeStringCompressed(value);
  }

  void writeUnsigned(const unsigned& value)
  {
    writeUInt32Compressed(value);
  }

  void writeSizeType(const size_t& value)
  {
    writeSizeTCompressed(value);
  }

  void writeFederationHandle(const FederationHandle& value)
  {
    writeUInt16Compressed(value);
  }

  void writeFOMModuleHandle(const FOMModuleHandle& value)
  {
    writeUInt16Compressed(value);
  }

  void writeAttributeHandle(const AttributeHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeDimensionHandle(const DimensionHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeObjectClassHandle(const ObjectClassHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeObjectInstanceHandle(const ObjectInstanceHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeInteractionClassHandle(const InteractionClassHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeParameterHandle(const ParameterHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeFederateHandle(const FederateHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeSpaceHandle(const SpaceHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeTransportationHandle(const TransportationHandle& value)
  {
    writeUInt8Compressed(value);
  }

  void writeOrderingHandle(const OrderingHandle& value)
  {
    writeUInt8Compressed(value);
  }

  void writeMessageRetractionHandle(const MessageRetractionHandle& value)
  {
    writeUInt64Compressed(value);
  }

  void writeRegionHandle(const RegionHandle& value)
  {
    writeUInt64Compressed(value);
  }

  void writeAttributeHandleVector(const AttributeHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (AttributeHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeAttributeHandle(*i);
    }
  }

  void writeFederateHandleSet(const FederateHandleSet& value)
  {
    writeSizeTCompressed(value.size());
    for (FederateHandleSet::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederateHandle(*i);
    }
  }

  void writeFederateHandleVector(const FederateHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FederateHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederateHandle(*i);
    }
  }

  void writeParameterHandleVector(const ParameterHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (ParameterHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeParameterHandle(*i);
    }
  }

  void writeDimensionHandleVector(const DimensionHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (DimensionHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeDimensionHandle(*i);
    }
  }

  void writeDimensionHandleSet(const DimensionHandleSet& value)
  {
    writeSizeTCompressed(value.size());
    for (DimensionHandleSet::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeDimensionHandle(*i);
    }
  }

  void writeObjectInstanceHandleVector(const ObjectInstanceHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (ObjectInstanceHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeObjectInstanceHandle(*i);
    }
  }

  void writeFOMModuleHandleVector(const FOMModuleHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMModuleHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMModuleHandle(*i);
    }
  }

  void writeFOMModuleHandleSet(const FOMModuleHandleSet& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMModuleHandleSet::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMModuleHandle(*i);
    }
  }

  void writeStringVector(const StringVector& value)
  {
    writeSizeTCompressed(value.size());
    for (StringVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(*i);
    }
  }

  void writeStringSet(const StringSet& value)
  {
    writeSizeTCompressed(value.size());
    for (StringSet::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(*i);
    }
  }

  void writeVariableLengthData(const VariableLengthData& value)
  {
    writeSizeTCompressed(value.size());
    if (!value.empty())
      _networkBuffer.addBuffer(value);
  }

  void writeRangeBoundsValue(const RangeBoundsValue& value)
  {
    writeUnsigned(value.getLowerBound());
    writeUnsigned(value.getUpperBound());
  }

  void writeDimensionHandleRangeBoundsValuePair(const DimensionHandleRangeBoundsValuePair& value)
  {
    writeDimensionHandle(value.first);
    writeRangeBoundsValue(value.second);
  }

  void writeRegionValue(const RegionValue& value)
  {
    writeSizeTCompressed(value.size());
    for (RegionValue::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeDimensionHandleRangeBoundsValuePair(*i);
    }
  }

  void writeRegionValueList(const RegionValueList& value)
  {
    writeSizeTCompressed(value.size());
    for (RegionValueList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeRegionValue(*i);
    }
  }

  void writeInteractionClassHandleRegionValueListPair(const InteractionClassHandleRegionValueListPair& value)
  {
    writeInteractionClassHandle(value.first);
    writeRegionValueList(value.second);
  }

  void writeAttributeHandleRegionValueListPair(const AttributeHandleRegionValueListPair& value)
  {
    writeAttributeHandle(value.first);
    writeRegionValueList(value.second);
  }

  void writeAttributeState(const AttributeState& value)
  {
    writeAttributeHandle(value.getAttributeHandle());
  }

  void writeAttributeStateVector(const AttributeStateVector& value)
  {
    writeSizeTCompressed(value.size());
    for (AttributeStateVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeAttributeState(*i);
    }
  }

  void writeParameterValue(const ParameterValue& value)
  {
    writeParameterHandle(value.getParameterHandle());
    writeVariableLengthData(value.getValue());
  }

  void writeParameterValueVector(const ParameterValueVector& value)
  {
    writeSizeTCompressed(value.size());
    for (ParameterValueVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeParameterValue(*i);
    }
  }

  void writeAttributeValue(const AttributeValue& value)
  {
    writeAttributeHandle(value.getAttributeHandle());
    writeVariableLengthData(value.getValue());
  }

  void writeAttributeValueVector(const AttributeValueVector& value)
  {
    writeSizeTCompressed(value.size());
    for (AttributeValueVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeAttributeValue(*i);
    }
  }

  void writeTimeStamp(const TimeStamp& value)
  {
    writeVariableLengthData(value.getLogicalTime());
    writeBool(value.getZeroLookahead());
  }

  void writeFederateHandleTimeStampMap(const FederateHandleTimeStampMap& value)
  {
    writeSizeTCompressed(value.size());
    for (FederateHandleTimeStampMap::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederateHandle(i->first);
      writeTimeStamp(i->second);
    }
  }

  void writeFederateHandleSaveStatusPair(const FederateHandleSaveStatusPair& value)
  {
    writeFederateHandle(value.first);
    writeSaveStatus(value.second);
  }

  void writeFederateHandleSaveStatusPairVector(const FederateHandleSaveStatusPairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FederateHandleSaveStatusPairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederateHandleSaveStatusPair(*i);
    }
  }

  void writeFederateHandleRestoreStatusPair(const FederateHandleRestoreStatusPair& value)
  {
    writeFederateHandle(value.first);
    writeRestoreStatus(value.second);
  }

  void writeFederateHandleRestoreStatusPairVector(const FederateHandleRestoreStatusPairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FederateHandleRestoreStatusPairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederateHandleRestoreStatusPair(*i);
    }
  }

  void writeFederationExecutionInformation(const FederationExecutionInformation& value)
  {
    writeString(value.getFederationExecutionName());
    writeString(value.getLogicalTimeFactoryName());
  }

  void writeFederationExecutionInformationVector(const FederationExecutionInformationVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FederationExecutionInformationVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederationExecutionInformation(*i);
    }
  }

  void writeObjectInstanceHandleNamePair(const ObjectInstanceHandleNamePair& value)
  {
    writeObjectInstanceHandle(value.first);
    writeString(value.second);
  }

  void writeObjectInstanceHandleNamePairVector(const ObjectInstanceHandleNamePairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (ObjectInstanceHandleNamePairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeObjectInstanceHandleNamePair(*i);
    }
  }

  void writeCreateFederationExecutionResponseType(const CreateFederationExecutionResponseType& value)
  {
    switch (value) {
    case CreateFederationExecutionResponseSuccess:
      writeUInt32Compressed(0);
      break;
    case CreateFederationExecutionResponseFederationExecutionAlreadyExists:
      writeUInt32Compressed(1);
      break;
    case CreateFederationExecutionResponseCouldNotOpenFDD:
      writeUInt32Compressed(2);
      break;
    case CreateFederationExecutionResponseErrorReadingFDD:
      writeUInt32Compressed(3);
      break;
    case CreateFederationExecutionResponseCouldNotCreateLogicalTimeFactory:
      writeUInt32Compressed(4);
      break;
    case CreateFederationExecutionResponseRTIinternalError:
      writeUInt32Compressed(5);
      break;
    default:
      writeUInt32Compressed(6);
      break;
    }
  }

  void writeDestroyFederationExecutionResponseType(const DestroyFederationExecutionResponseType& value)
  {
    switch (value) {
    case DestroyFederationExecutionResponseSuccess:
      writeUInt32Compressed(0);
      break;
    case DestroyFederationExecutionResponseFederatesCurrentlyJoined:
      writeUInt32Compressed(1);
      break;
    case DestroyFederationExecutionResponseFederationExecutionDoesNotExist:
      writeUInt32Compressed(2);
      break;
    case DestroyFederationExecutionResponseRTIinternalError:
      writeUInt32Compressed(3);
      break;
    default:
      writeUInt32Compressed(4);
      break;
    }
  }

  void writeJoinFederationExecutionResponseType(const JoinFederationExecutionResponseType& value)
  {
    switch (value) {
    case JoinFederationExecutionResponseSuccess:
      writeUInt32Compressed(0);
      break;
    case JoinFederationExecutionResponseFederateNameAlreadyInUse:
      writeUInt32Compressed(1);
      break;
    case JoinFederationExecutionResponseFederationExecutionDoesNotExist:
      writeUInt32Compressed(2);
      break;
    case JoinFederationExecutionResponseSaveInProgress:
      writeUInt32Compressed(3);
      break;
    case JoinFederationExecutionResponseRestoreInProgress:
      writeUInt32Compressed(4);
      break;
    default:
      writeUInt32Compressed(5);
      break;
    }
  }

  void writeRegisterFederationSynchronizationPointResponseType(const RegisterFederationSynchronizationPointResponseType& value)
  {
    switch (value) {
    case RegisterFederationSynchronizationPointResponseSuccess:
      writeUInt32Compressed(0);
      break;
    case RegisterFederationSynchronizationPointResponseLabelNotUnique:
      writeUInt32Compressed(1);
      break;
    case RegisterFederationSynchronizationPointResponseMemberNotJoined:
      writeUInt32Compressed(2);
      break;
    default:
      writeUInt32Compressed(3);
      break;
    }
  }

  void writeConfigurationParameterMap(const ConfigurationParameterMap& value)
  {
    writeSizeTCompressed(value.size());
    for (ConfigurationParameterMap::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(i->first);
      writeStringVector(i->second);
    }
  }

  void writeFOMStringTransportationType(const FOMStringTransportationType& value)
  {
    writeString(value.getName());
  }

  void writeFOMStringTransportationTypeList(const FOMStringTransportationTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringTransportationTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringTransportationType(*i);
    }
  }

  void writeFOMStringDimension(const FOMStringDimension& value)
  {
    writeString(value.getName());
    writeUnsigned(value.getUpperBound());
  }

  void writeFOMStringDimensionList(const FOMStringDimensionList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringDimensionList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringDimension(*i);
    }
  }

  void writeFOMStringRoutingSpace(const FOMStringRoutingSpace& value)
  {
    writeString(value.getName());
    writeStringSet(value.getDimensionSet());
  }

  void writeFOMStringRoutingSpaceList(const FOMStringRoutingSpaceList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringRoutingSpaceList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringRoutingSpace(*i);
    }
  }

  void writeFOMStringParameter(const FOMStringParameter& value)
  {
    writeString(value.getName());
  }

  void writeFOMStringParameterList(const FOMStringParameterList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringParameterList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringParameter(*i);
    }
  }

  void writeFOMStringInteractionClass(const FOMStringInteractionClass& value)
  {
    writeString(value.getName());
    writeString(value.getParentName());
    writeString(value.getOrderType());
    writeString(value.getTransportationType());
    writeString(value.getRoutingSpace());
    writeStringSet(value.getDimensionSet());
    writeFOMStringParameterList(value.getParameterList());
  }

  void writeFOMStringInteractionClassList(const FOMStringInteractionClassList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringInteractionClassList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringInteractionClass(*i);
    }
  }

  void writeFOMStringAttribute(const FOMStringAttribute& value)
  {
    writeString(value.getName());
    writeString(value.getOrderType());
    writeString(value.getTransportationType());
    writeString(value.getRoutingSpace());
    writeStringSet(value.getDimensionSet());
  }

  void writeFOMStringAttributeList(const FOMStringAttributeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringAttributeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringAttribute(*i);
    }
  }

  void writeFOMStringObjectClass(const FOMStringObjectClass& value)
  {
    writeString(value.getName());
    writeString(value.getParentName());
    writeFOMStringAttributeList(value.getAttributeList());
  }

  void writeFOMStringObjectClassList(const FOMStringObjectClassList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringObjectClassList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringObjectClass(*i);
    }
  }

  void writeFOMStringModule(const FOMStringModule& value)
  {
    writeFOMStringTransportationTypeList(value.getTransportationTypeList());
    writeFOMStringDimensionList(value.getDimensionList());
    writeFOMStringRoutingSpaceList(value.getRoutingSpaceList());
    writeFOMStringInteractionClassList(value.getInteractionClassList());
    writeFOMStringObjectClassList(value.getObjectClassList());
  }

  void writeFOMStringModuleList(const FOMStringModuleList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringModuleList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringModule(*i);
    }
  }

  void writeFOMTransportationType(const FOMTransportationType& value)
  {
    writeString(value.getName());
    writeTransportationType(value.getTransportationType());
  }

  void writeFOMTransportationTypeList(const FOMTransportationTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMTransportationTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMTransportationType(*i);
    }
  }

  void writeFOMTransportationTypeMap(const FOMTransportationTypeMap& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMTransportationTypeMap::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(i->first);
      writeFOMTransportationType(i->second);
    }
  }

  void writeFOMDimension(const FOMDimension& value)
  {
    writeString(value.getName());
    writeDimensionHandle(value.getDimensionHandle());
    writeUnsigned(value.getUpperBound());
  }

  void writeFOMDimensionList(const FOMDimensionList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMDimensionList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMDimension(*i);
    }
  }

  void writeFOMDimensionMap(const FOMDimensionMap& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMDimensionMap::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(i->first);
      writeFOMDimension(i->second);
    }
  }

  void writeFOMRoutingSpace(const FOMRoutingSpace& value)
  {
    writeString(value.getName());
    writeSpaceHandle(value.getSpaceHandle());
    writeDimensionHandleSet(value.getDimensionHandleSet());
  }

  void writeFOMRoutingSpaceList(const FOMRoutingSpaceList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMRoutingSpaceList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMRoutingSpace(*i);
    }
  }

  void writeFOMRoutingSpaceMap(const FOMRoutingSpaceMap& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMRoutingSpaceMap::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(i->first);
      writeFOMRoutingSpace(i->second);
    }
  }

  void writeFOMParameter(const FOMParameter& value)
  {
    writeString(value.getName());
    writeParameterHandle(value.getParameterHandle());
  }

  void writeFOMParameterList(const FOMParameterList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMParameterList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMParameter(*i);
    }
  }

  void writeFOMParameterMap(const FOMParameterMap& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMParameterMap::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(i->first);
      writeFOMParameter(i->second);
    }
  }

  void writeFOMInteractionClass(const FOMInteractionClass& value)
  {
    writeString(value.getName());
    writeInteractionClassHandle(value.getInteractionClassHandle());
    writeInteractionClassHandle(value.getParentInteractionClassHandle());
    writeOrderType(value.getOrderType());
    writeTransportationType(value.getTransportationType());
    writeDimensionHandleSet(value.getDimensionHandleSet());
    writeFOMParameterList(value.getParameterList());
  }

  void writeFOMInteractionClassList(const FOMInteractionClassList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMInteractionClassList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMInteractionClass(*i);
    }
  }

  void writeFOMAttribute(const FOMAttribute& value)
  {
    writeString(value.getName());
    writeAttributeHandle(value.getAttributeHandle());
    writeOrderType(value.getOrderType());
    writeTransportationType(value.getTransportationType());
    writeDimensionHandleSet(value.getDimensionHandleSet());
  }

  void writeFOMAttributeList(const FOMAttributeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMAttributeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMAttribute(*i);
    }
  }

  void writeFOMObjectClass(const FOMObjectClass& value)
  {
    writeString(value.getName());
    writeObjectClassHandle(value.getObjectClassHandle());
    writeObjectClassHandle(value.getParentObjectClassHandle());
    writeFOMAttributeList(value.getAttributeList());
  }

  void writeFOMObjectClassList(const FOMObjectClassList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMObjectClassList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMObjectClass(*i);
    }
  }

  void writeFOMModule(const FOMModule& value)
  {
    writeFOMModuleHandle(value.getFOMModuleHandle());
    writeFOMModuleHandleSet(value.getRequiredFOMModuleHandleSet());
    writeFOMTransportationTypeList(value.getTransportationTypeList());
    writeFOMDimensionList(value.getDimensionList());
    writeFOMRoutingSpaceList(value.getRoutingSpaceList());
    writeFOMInteractionClassList(value.getInteractionClassList());
    writeFOMObjectClassList(value.getObjectClassList());
  }

  void writeFOMModuleList(const FOMModuleList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMModuleList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMModule(*i);
    }
  }

  void writeConnectionLostMessage(const ConnectionLostMessage& value)
  {
    writeString(value.getFaultDescription());
  }

  void writeCreateFederationExecutionRequestMessage(const CreateFederationExecutionRequestMessage& value)
  {
    writeString(value.getFederationExecution());
    writeString(value.getLogicalTimeFactoryName());
    writeStringVector(value.getFOMModuleFileList());
    writeFOMStringModuleList(value.getFOMStringModuleList());
  }

  void writeCreateFederationExecutionResponseMessage(const CreateFederationExecutionResponseMessage& value)
  {
    writeCreateFederationExecutionResponseType(value.getCreateFederationExecutionResponseType());
    writeString(value.getExceptionString());
  }

  void writeDestroyFederationExecutionRequestMessage(const DestroyFederationExecutionRequestMessage& value)
  {
    writeString(value.getFederationExecution());
  }

  void writeDestroyFederationExecutionResponseMessage(const DestroyFederationExecutionResponseMessage& value)
  {
    writeDestroyFederationExecutionResponseType(value.getDestroyFederationExecutionResponseType());
  }

  void writeEnumerateFederationExecutionsRequestMessage(const EnumerateFederationExecutionsRequestMessage& value)
  {
  }

  void writeEnumerateFederationExecutionsResponseMessage(const EnumerateFederationExecutionsResponseMessage& value)
  {
    writeFederationExecutionInformationVector(value.getFederationExecutionInformationVector());
  }

  void writeInsertFederationExecutionMessage(const InsertFederationExecutionMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeString(value.getFederationName());
    writeString(value.getLogicalTimeFactoryName());
    writeConfigurationParameterMap(value.getConfigurationParameterMap());
    writeFOMModuleList(value.getFOMModuleList());
  }

  void writeShutdownFederationExecutionMessage(const ShutdownFederationExecutionMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
  }

  void writeEraseFederationExecutionMessage(const EraseFederationExecutionMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
  }

  void writeReleaseFederationHandleMessage(const ReleaseFederationHandleMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
  }

  void writeJoinFederationExecutionRequestMessage(const JoinFederationExecutionRequestMessage& value)
  {
    writeString(value.getFederationExecution());
    writeString(value.getFederateType());
    writeString(value.getFederateName());
    writeFOMStringModuleList(value.getFOMStringModuleList());
    writeConfigurationParameterMap(value.getConfigurationParameterMap());
  }

  void writeJoinFederationExecutionResponseMessage(const JoinFederationExecutionResponseMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeJoinFederationExecutionResponseType(value.getJoinFederationExecutionResponseType());
    writeString(value.getExceptionString());
    writeFederateHandle(value.getFederateHandle());
    writeString(value.getFederateType());
    writeString(value.getFederateName());
    writeFOMModuleHandleVector(value.getFOMModuleHandleList());
  }

  void writeResignFederationExecutionRequestMessage(const ResignFederationExecutionRequestMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
  }

  void writeJoinFederateNotifyMessage(const JoinFederateNotifyMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeString(value.getFederateType());
    writeString(value.getFederateName());
  }

  void writeResignFederateNotifyMessage(const ResignFederateNotifyMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
  }

  void writeRegisterFederationSynchronizationPointMessage(const RegisterFederationSynchronizationPointMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeString(value.getLabel());
    writeVariableLengthData(value.getTag());
    writeFederateHandleSet(value.getFederateHandleSet());
  }

  void writeRegisterFederationSynchronizationPointResponseMessage(const RegisterFederationSynchronizationPointResponseMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeString(value.getLabel());
    writeRegisterFederationSynchronizationPointResponseType(value.getRegisterFederationSynchronizationPointResponseType());
  }

  void writeAnnounceSynchronizationPointMessage(const AnnounceSynchronizationPointMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeString(value.getLabel());
    writeVariableLengthData(value.getTag());
    writeBool(value.getAddJoiningFederates());
    writeFederateHandleSet(value.getFederateHandleSet());
  }

  void writeSynchronizationPointAchievedMessage(const SynchronizationPointAchievedMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeString(value.getLabel());
    writeFederateHandleSet(value.getFederateHandleSet());
  }

  void writeFederationSynchronizedMessage(const FederationSynchronizedMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeString(value.getLabel());
    writeFederateHandleSet(value.getFederateHandleSet());
  }

  void writeEnableTimeRegulationRequestMessage(const EnableTimeRegulationRequestMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeTimeStamp(value.getTimeStamp());
  }

  void writeEnableTimeRegulationResponseMessage(const EnableTimeRegulationResponseMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeFederateHandle(value.getRespondingFederateHandle());
    writeBool(value.getTimeStampValid());
    writeTimeStamp(value.getTimeStamp());
  }

  void writeDisableTimeRegulationRequestMessage(const DisableTimeRegulationRequestMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
  }

  void writeCommitLowerBoundTimeStampMessage(const CommitLowerBoundTimeStampMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeTimeStamp(value.getTimeStamp());
  }

  void writeTimeConstrainedEnabledMessage(const TimeConstrainedEnabledMessage& value)
  {
    writeVariableLengthData(value.getLogicalTime());
  }

  void writeTimeRegulationEnabledMessage(const TimeRegulationEnabledMessage& value)
  {
    writeVariableLengthData(value.getLogicalTime());
  }

  void writeTimeAdvanceGrantedMessage(const TimeAdvanceGrantedMessage& value)
  {
    writeVariableLengthData(value.getLogicalTime());
  }

  void writeChangeInteractionClassPublicationMessage(const ChangeInteractionClassPublicationMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writePublicationType(value.getPublicationType());
    writeInteractionClassHandle(value.getInteractionClassHandle());
  }

  void writeChangeObjectClassPublicationMessage(const ChangeObjectClassPublicationMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writePublicationType(value.getPublicationType());
    writeObjectClassHandle(value.getObjectClassHandle());
    writeAttributeHandleVector(value.getAttributeHandles());
  }

  void writeChangeInteractionClassSubscriptionMessage(const ChangeInteractionClassSubscriptionMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeSubscriptionType(value.getSubscriptionType());
    writeInteractionClassHandle(value.getInteractionClassHandle());
  }

  void writeChangeObjectClassSubscriptionMessage(const ChangeObjectClassSubscriptionMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeSubscriptionType(value.getSubscriptionType());
    writeObjectClassHandle(value.getObjectClassHandle());
    writeAttributeHandleVector(value.getAttributeHandles());
  }

  void writeRegistrationForObjectClassMessage(const RegistrationForObjectClassMessage& value)
  {
    writeObjectClassHandle(value.getObjectClassHandle());
    writeBool(value.getStart());
  }

  void writeTurnInteractionsOnMessage(const TurnInteractionsOnMessage& value)
  {
    writeInteractionClassHandle(value.getInteractionClassHandle());
    writeBool(value.getOn());
  }

  void writeInteractionMessage(const InteractionMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeInteractionClassHandle(value.getInteractionClassHandle());
    writeTransportationType(value.getTransportationType());
    writeVariableLengthData(value.getTag());
    writeParameterValueVector(value.getParameterValues());
  }

  void writeTimeStampedInteractionMessage(const TimeStampedInteractionMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeInteractionClassHandle(value.getInteractionClassHandle());
    writeTransportationType(value.getTransportationType());
    writeVariableLengthData(value.getTag());
    writeVariableLengthData(value.getTimeStamp());
    writeMessageRetractionHandle(value.getMessageRetractionHandle());
    writeParameterValueVector(value.getParameterValues());
  }

  void writeObjectInstanceHandlesRequestMessage(const ObjectInstanceHandlesRequestMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeUnsigned(value.getCount());
  }

  void writeObjectInstanceHandlesResponseMessage(const ObjectInstanceHandlesResponseMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeObjectInstanceHandleNamePairVector(value.getObjectInstanceHandleNamePairVector());
  }

  void writeReleaseMultipleObjectInstanceNameHandlePairsMessage(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeObjectInstanceHandleVector(value.getObjectInstanceHandleVector());
  }

  void writeReserveObjectInstanceNameRequestMessage(const ReserveObjectInstanceNameRequestMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeString(value.getName());
  }

  void writeReserveObjectInstanceNameResponseMessage(const ReserveObjectInstanceNameResponseMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeObjectInstanceHandleNamePair(value.getObjectInstanceHandleNamePair());
    writeBool(value.getSuccess());
  }

  void writeReserveMultipleObjectInstanceNameRequestMessage(const ReserveMultipleObjectInstanceNameRequestMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeStringVector(value.getNameList());
  }

  void writeReserveMultipleObjectInstanceNameResponseMessage(const ReserveMultipleObjectInstanceNameResponseMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeFederateHandle(value.getFederateHandle());
    writeObjectInstanceHandleNamePairVector(value.getObjectInstanceHandleNamePairVector());
    writeBool(value.getSuccess());
  }

  void writeInsertObjectInstanceMessage(const InsertObjectInstanceMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeObjectClassHandle(value.getObjectClassHandle());
    writeObjectInstanceHandle(value.getObjectInstanceHandle());
    writeString(value.getName());
    writeAttributeStateVector(value.getAttributeStateVector());
  }

  void writeDeleteObjectInstanceMessage(const DeleteObjectInstanceMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeObjectInstanceHandle(value.getObjectInstanceHandle());
    writeVariableLengthData(value.getTag());
  }

  void writeTimeStampedDeleteObjectInstanceMessage(const TimeStampedDeleteObjectInstanceMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeObjectInstanceHandle(value.getObjectInstanceHandle());
    writeVariableLengthData(value.getTag());
    writeVariableLengthData(value.getTimeStamp());
    writeMessageRetractionHandle(value.getMessageRetractionHandle());
  }

  void writeAttributeUpdateMessage(const AttributeUpdateMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeObjectInstanceHandle(value.getObjectInstanceHandle());
    writeVariableLengthData(value.getTag());
    writeTransportationType(value.getTransportationType());
    writeAttributeValueVector(value.getAttributeValues());
  }

  void writeTimeStampedAttributeUpdateMessage(const TimeStampedAttributeUpdateMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeObjectInstanceHandle(value.getObjectInstanceHandle());
    writeVariableLengthData(value.getTag());
    writeVariableLengthData(value.getTimeStamp());
    writeMessageRetractionHandle(value.getMessageRetractionHandle());
    writeTransportationType(value.getTransportationType());
    writeAttributeValueVector(value.getAttributeValues());
  }

  void writeRequestAttributeUpdateMessage(const RequestAttributeUpdateMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeObjectInstanceHandle(value.getObjectInstanceHandle());
    writeAttributeHandleVector(value.getAttributeHandles());
    writeVariableLengthData(value.getTag());
  }

  void writeRequestClassAttributeUpdateMessage(const RequestClassAttributeUpdateMessage& value)
  {
    writeFederationHandle(value.getFederationHandle());
    writeObjectClassHandle(value.getObjectClassHandle());
    writeAttributeHandleVector(value.getAttributeHandles());
    writeVariableLengthData(value.getTag());
  }

  NetworkBuffer& _networkBuffer;
};

class OPENRTI_LOCAL TightBE1MessageEncoder::DispatchFunctor {
public:
  DispatchFunctor(TightBE1MessageEncoder& encoder, NetworkBuffer& networkBuffer) :
    _encoder(encoder), _networkBuffer(networkBuffer)
  { }

  template<typename M>
  void operator()(const M& message) const
  { encode(_networkBuffer, message); }

  void
  encode(NetworkBuffer& networkBuffer, const AbstractMessage& message) const
  {
    throw RTIinternalError("Invalid message dispatched to encoder!");
  }

  void
  encode(NetworkBuffer& networkBuffer, const ConnectionLostMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(1);
    encodeStream.writeConnectionLostMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const CreateFederationExecutionRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(2);
    encodeStream.writeCreateFederationExecutionRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const CreateFederationExecutionResponseMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(3);
    encodeStream.writeCreateFederationExecutionResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const DestroyFederationExecutionRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(4);
    encodeStream.writeDestroyFederationExecutionRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const DestroyFederationExecutionResponseMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(5);
    encodeStream.writeDestroyFederationExecutionResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const EnumerateFederationExecutionsRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(6);
    encodeStream.writeEnumerateFederationExecutionsRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const EnumerateFederationExecutionsResponseMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(7);
    encodeStream.writeEnumerateFederationExecutionsResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const InsertFederationExecutionMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(8);
    encodeStream.writeInsertFederationExecutionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ShutdownFederationExecutionMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(9);
    encodeStream.writeShutdownFederationExecutionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const EraseFederationExecutionMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(10);
    encodeStream.writeEraseFederationExecutionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ReleaseFederationHandleMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(11);
    encodeStream.writeReleaseFederationHandleMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const JoinFederationExecutionRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(12);
    encodeStream.writeJoinFederationExecutionRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const JoinFederationExecutionResponseMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(13);
    encodeStream.writeJoinFederationExecutionResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ResignFederationExecutionRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(14);
    encodeStream.writeResignFederationExecutionRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const JoinFederateNotifyMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(15);
    encodeStream.writeJoinFederateNotifyMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ResignFederateNotifyMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(16);
    encodeStream.writeResignFederateNotifyMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const RegisterFederationSynchronizationPointMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(30);
    encodeStream.writeRegisterFederationSynchronizationPointMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const RegisterFederationSynchronizationPointResponseMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(31);
    encodeStream.writeRegisterFederationSynchronizationPointResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const AnnounceSynchronizationPointMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(32);
    encodeStream.writeAnnounceSynchronizationPointMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const SynchronizationPointAchievedMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(33);
    encodeStream.writeSynchronizationPointAchievedMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const FederationSynchronizedMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(34);
    encodeStream.writeFederationSynchronizedMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const EnableTimeRegulationRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(40);
    encodeStream.writeEnableTimeRegulationRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const EnableTimeRegulationResponseMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(41);
    encodeStream.writeEnableTimeRegulationResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const DisableTimeRegulationRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(42);
    encodeStream.writeDisableTimeRegulationRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const CommitLowerBoundTimeStampMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(43);
    encodeStream.writeCommitLowerBoundTimeStampMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ChangeInteractionClassPublicationMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(50);
    encodeStream.writeChangeInteractionClassPublicationMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ChangeObjectClassPublicationMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(51);
    encodeStream.writeChangeObjectClassPublicationMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ChangeInteractionClassSubscriptionMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(52);
    encodeStream.writeChangeInteractionClassSubscriptionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ChangeObjectClassSubscriptionMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(53);
    encodeStream.writeChangeObjectClassSubscriptionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const InteractionMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(80);
    encodeStream.writeInteractionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const TimeStampedInteractionMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(81);
    encodeStream.writeTimeStampedInteractionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ObjectInstanceHandlesRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(60);
    encodeStream.writeObjectInstanceHandlesRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ObjectInstanceHandlesResponseMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(61);
    encodeStream.writeObjectInstanceHandlesResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ReleaseMultipleObjectInstanceNameHandlePairsMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(62);
    encodeStream.writeReleaseMultipleObjectInstanceNameHandlePairsMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ReserveObjectInstanceNameRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(63);
    encodeStream.writeReserveObjectInstanceNameRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ReserveObjectInstanceNameResponseMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(64);
    encodeStream.writeReserveObjectInstanceNameResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ReserveMultipleObjectInstanceNameRequestMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(65);
    encodeStream.writeReserveMultipleObjectInstanceNameRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const ReserveMultipleObjectInstanceNameResponseMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(66);
    encodeStream.writeReserveMultipleObjectInstanceNameResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const InsertObjectInstanceMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(90);
    encodeStream.writeInsertObjectInstanceMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const DeleteObjectInstanceMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(91);
    encodeStream.writeDeleteObjectInstanceMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const TimeStampedDeleteObjectInstanceMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(92);
    encodeStream.writeTimeStampedDeleteObjectInstanceMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const AttributeUpdateMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(94);
    encodeStream.writeAttributeUpdateMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const TimeStampedAttributeUpdateMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(96);
    encodeStream.writeTimeStampedAttributeUpdateMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const RequestAttributeUpdateMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(97);
    encodeStream.writeRequestAttributeUpdateMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(NetworkBuffer& networkBuffer, const RequestClassAttributeUpdateMessage& message) const
  {
    EncodeDataStream headerStream(networkBuffer.addScratchBuffer());
    EncodeStream encodeStream(networkBuffer.addScratchBuffer(), networkBuffer);
    encodeStream.writeUInt16Compressed(98);
    encodeStream.writeRequestClassAttributeUpdateMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

private:
  TightBE1MessageEncoder& _encoder;
  NetworkBuffer& _networkBuffer;
};

TightBE1MessageEncoder::TightBE1MessageEncoder()
{
}

TightBE1MessageEncoder::~TightBE1MessageEncoder()
{
}

const char*
TightBE1MessageEncoder::getName() const
{
  return "TightBE1";
}

void
TightBE1MessageEncoder::encodeMessage(NetworkBuffer& networkBuffer, const AbstractMessage& message)
{
  FunctorConstMessageDispatcher<DispatchFunctor> dispatcher(DispatchFunctor(*this, networkBuffer));
  message.dispatch(dispatcher);
}

} // namespace OpenRTI


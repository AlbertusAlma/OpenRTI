/* -*-c++-*- OpenRTI - Copyright (C) 2009-2011 Mathias Froehlich
 *
 *
 * This file is part of OpenRTI.
 *
 * OpenRTI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * OpenRTI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OpenRTI.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This file is autogenerated by messagegen.py. Do not edit!
 *
 */


#include "Message.h"

#include <ostream>
#include "AbstractMessage.h"
#include "AbstractMessageDispatcher.h"
#include "StringUtils.h"

namespace OpenRTI {

ConnectionLostMessage::ConnectionLostMessage()
{
}

ConnectionLostMessage::~ConnectionLostMessage()
{
}

const char*
ConnectionLostMessage::getTypeName() const
{
  return "ConnectionLostMessage";
}

void
ConnectionLostMessage::out(std::ostream& os) const
{
  os << "ConnectionLostMessage " << *this;
}

void
ConnectionLostMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ConnectionLostMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


CreateFederationExecutionRequestMessage::CreateFederationExecutionRequestMessage()
{
}

CreateFederationExecutionRequestMessage::~CreateFederationExecutionRequestMessage()
{
}

const char*
CreateFederationExecutionRequestMessage::getTypeName() const
{
  return "CreateFederationExecutionRequestMessage";
}

void
CreateFederationExecutionRequestMessage::out(std::ostream& os) const
{
  os << "CreateFederationExecutionRequestMessage " << *this;
}

void
CreateFederationExecutionRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
CreateFederationExecutionRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


CreateFederationExecutionResponseMessage::CreateFederationExecutionResponseMessage()
{
}

CreateFederationExecutionResponseMessage::~CreateFederationExecutionResponseMessage()
{
}

const char*
CreateFederationExecutionResponseMessage::getTypeName() const
{
  return "CreateFederationExecutionResponseMessage";
}

void
CreateFederationExecutionResponseMessage::out(std::ostream& os) const
{
  os << "CreateFederationExecutionResponseMessage " << *this;
}

void
CreateFederationExecutionResponseMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
CreateFederationExecutionResponseMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


DestroyFederationExecutionRequestMessage::DestroyFederationExecutionRequestMessage()
{
}

DestroyFederationExecutionRequestMessage::~DestroyFederationExecutionRequestMessage()
{
}

const char*
DestroyFederationExecutionRequestMessage::getTypeName() const
{
  return "DestroyFederationExecutionRequestMessage";
}

void
DestroyFederationExecutionRequestMessage::out(std::ostream& os) const
{
  os << "DestroyFederationExecutionRequestMessage " << *this;
}

void
DestroyFederationExecutionRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
DestroyFederationExecutionRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


DestroyFederationExecutionResponseMessage::DestroyFederationExecutionResponseMessage()
{
}

DestroyFederationExecutionResponseMessage::~DestroyFederationExecutionResponseMessage()
{
}

const char*
DestroyFederationExecutionResponseMessage::getTypeName() const
{
  return "DestroyFederationExecutionResponseMessage";
}

void
DestroyFederationExecutionResponseMessage::out(std::ostream& os) const
{
  os << "DestroyFederationExecutionResponseMessage " << *this;
}

void
DestroyFederationExecutionResponseMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
DestroyFederationExecutionResponseMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


EnumerateFederationExecutionsRequestMessage::EnumerateFederationExecutionsRequestMessage()
{
}

EnumerateFederationExecutionsRequestMessage::~EnumerateFederationExecutionsRequestMessage()
{
}

const char*
EnumerateFederationExecutionsRequestMessage::getTypeName() const
{
  return "EnumerateFederationExecutionsRequestMessage";
}

void
EnumerateFederationExecutionsRequestMessage::out(std::ostream& os) const
{
  os << "EnumerateFederationExecutionsRequestMessage " << *this;
}

void
EnumerateFederationExecutionsRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
EnumerateFederationExecutionsRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


EnumerateFederationExecutionsResponseMessage::EnumerateFederationExecutionsResponseMessage()
{
}

EnumerateFederationExecutionsResponseMessage::~EnumerateFederationExecutionsResponseMessage()
{
}

const char*
EnumerateFederationExecutionsResponseMessage::getTypeName() const
{
  return "EnumerateFederationExecutionsResponseMessage";
}

void
EnumerateFederationExecutionsResponseMessage::out(std::ostream& os) const
{
  os << "EnumerateFederationExecutionsResponseMessage " << *this;
}

void
EnumerateFederationExecutionsResponseMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
EnumerateFederationExecutionsResponseMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


InsertFederationExecutionMessage::InsertFederationExecutionMessage()
{
}

InsertFederationExecutionMessage::~InsertFederationExecutionMessage()
{
}

const char*
InsertFederationExecutionMessage::getTypeName() const
{
  return "InsertFederationExecutionMessage";
}

void
InsertFederationExecutionMessage::out(std::ostream& os) const
{
  os << "InsertFederationExecutionMessage " << *this;
}

void
InsertFederationExecutionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
InsertFederationExecutionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ShutdownFederationExecutionMessage::ShutdownFederationExecutionMessage()
{
}

ShutdownFederationExecutionMessage::~ShutdownFederationExecutionMessage()
{
}

const char*
ShutdownFederationExecutionMessage::getTypeName() const
{
  return "ShutdownFederationExecutionMessage";
}

void
ShutdownFederationExecutionMessage::out(std::ostream& os) const
{
  os << "ShutdownFederationExecutionMessage " << *this;
}

void
ShutdownFederationExecutionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ShutdownFederationExecutionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


EraseFederationExecutionMessage::EraseFederationExecutionMessage()
{
}

EraseFederationExecutionMessage::~EraseFederationExecutionMessage()
{
}

const char*
EraseFederationExecutionMessage::getTypeName() const
{
  return "EraseFederationExecutionMessage";
}

void
EraseFederationExecutionMessage::out(std::ostream& os) const
{
  os << "EraseFederationExecutionMessage " << *this;
}

void
EraseFederationExecutionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
EraseFederationExecutionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ReleaseFederationHandleMessage::ReleaseFederationHandleMessage()
{
}

ReleaseFederationHandleMessage::~ReleaseFederationHandleMessage()
{
}

const char*
ReleaseFederationHandleMessage::getTypeName() const
{
  return "ReleaseFederationHandleMessage";
}

void
ReleaseFederationHandleMessage::out(std::ostream& os) const
{
  os << "ReleaseFederationHandleMessage " << *this;
}

void
ReleaseFederationHandleMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ReleaseFederationHandleMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


JoinFederationExecutionRequestMessage::JoinFederationExecutionRequestMessage()
{
}

JoinFederationExecutionRequestMessage::~JoinFederationExecutionRequestMessage()
{
}

const char*
JoinFederationExecutionRequestMessage::getTypeName() const
{
  return "JoinFederationExecutionRequestMessage";
}

void
JoinFederationExecutionRequestMessage::out(std::ostream& os) const
{
  os << "JoinFederationExecutionRequestMessage " << *this;
}

void
JoinFederationExecutionRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
JoinFederationExecutionRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


JoinFederationExecutionResponseMessage::JoinFederationExecutionResponseMessage()
{
}

JoinFederationExecutionResponseMessage::~JoinFederationExecutionResponseMessage()
{
}

const char*
JoinFederationExecutionResponseMessage::getTypeName() const
{
  return "JoinFederationExecutionResponseMessage";
}

void
JoinFederationExecutionResponseMessage::out(std::ostream& os) const
{
  os << "JoinFederationExecutionResponseMessage " << *this;
}

void
JoinFederationExecutionResponseMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
JoinFederationExecutionResponseMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ResignFederationExecutionRequestMessage::ResignFederationExecutionRequestMessage()
{
}

ResignFederationExecutionRequestMessage::~ResignFederationExecutionRequestMessage()
{
}

const char*
ResignFederationExecutionRequestMessage::getTypeName() const
{
  return "ResignFederationExecutionRequestMessage";
}

void
ResignFederationExecutionRequestMessage::out(std::ostream& os) const
{
  os << "ResignFederationExecutionRequestMessage " << *this;
}

void
ResignFederationExecutionRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ResignFederationExecutionRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


JoinFederateNotifyMessage::JoinFederateNotifyMessage()
{
}

JoinFederateNotifyMessage::~JoinFederateNotifyMessage()
{
}

const char*
JoinFederateNotifyMessage::getTypeName() const
{
  return "JoinFederateNotifyMessage";
}

void
JoinFederateNotifyMessage::out(std::ostream& os) const
{
  os << "JoinFederateNotifyMessage " << *this;
}

void
JoinFederateNotifyMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
JoinFederateNotifyMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ResignFederateNotifyMessage::ResignFederateNotifyMessage()
{
}

ResignFederateNotifyMessage::~ResignFederateNotifyMessage()
{
}

const char*
ResignFederateNotifyMessage::getTypeName() const
{
  return "ResignFederateNotifyMessage";
}

void
ResignFederateNotifyMessage::out(std::ostream& os) const
{
  os << "ResignFederateNotifyMessage " << *this;
}

void
ResignFederateNotifyMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ResignFederateNotifyMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


RegisterFederationSynchronizationPointMessage::RegisterFederationSynchronizationPointMessage()
{
}

RegisterFederationSynchronizationPointMessage::~RegisterFederationSynchronizationPointMessage()
{
}

const char*
RegisterFederationSynchronizationPointMessage::getTypeName() const
{
  return "RegisterFederationSynchronizationPointMessage";
}

void
RegisterFederationSynchronizationPointMessage::out(std::ostream& os) const
{
  os << "RegisterFederationSynchronizationPointMessage " << *this;
}

void
RegisterFederationSynchronizationPointMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
RegisterFederationSynchronizationPointMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


RegisterFederationSynchronizationPointResponseMessage::RegisterFederationSynchronizationPointResponseMessage()
{
}

RegisterFederationSynchronizationPointResponseMessage::~RegisterFederationSynchronizationPointResponseMessage()
{
}

const char*
RegisterFederationSynchronizationPointResponseMessage::getTypeName() const
{
  return "RegisterFederationSynchronizationPointResponseMessage";
}

void
RegisterFederationSynchronizationPointResponseMessage::out(std::ostream& os) const
{
  os << "RegisterFederationSynchronizationPointResponseMessage " << *this;
}

void
RegisterFederationSynchronizationPointResponseMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
RegisterFederationSynchronizationPointResponseMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


AnnounceSynchronizationPointMessage::AnnounceSynchronizationPointMessage()
{
}

AnnounceSynchronizationPointMessage::~AnnounceSynchronizationPointMessage()
{
}

const char*
AnnounceSynchronizationPointMessage::getTypeName() const
{
  return "AnnounceSynchronizationPointMessage";
}

void
AnnounceSynchronizationPointMessage::out(std::ostream& os) const
{
  os << "AnnounceSynchronizationPointMessage " << *this;
}

void
AnnounceSynchronizationPointMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
AnnounceSynchronizationPointMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


SynchronizationPointAchievedMessage::SynchronizationPointAchievedMessage()
{
}

SynchronizationPointAchievedMessage::~SynchronizationPointAchievedMessage()
{
}

const char*
SynchronizationPointAchievedMessage::getTypeName() const
{
  return "SynchronizationPointAchievedMessage";
}

void
SynchronizationPointAchievedMessage::out(std::ostream& os) const
{
  os << "SynchronizationPointAchievedMessage " << *this;
}

void
SynchronizationPointAchievedMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
SynchronizationPointAchievedMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


FederationSynchronizedMessage::FederationSynchronizedMessage()
{
}

FederationSynchronizedMessage::~FederationSynchronizedMessage()
{
}

const char*
FederationSynchronizedMessage::getTypeName() const
{
  return "FederationSynchronizedMessage";
}

void
FederationSynchronizedMessage::out(std::ostream& os) const
{
  os << "FederationSynchronizedMessage " << *this;
}

void
FederationSynchronizedMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
FederationSynchronizedMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


EnableTimeRegulationRequestMessage::EnableTimeRegulationRequestMessage()
{
}

EnableTimeRegulationRequestMessage::~EnableTimeRegulationRequestMessage()
{
}

const char*
EnableTimeRegulationRequestMessage::getTypeName() const
{
  return "EnableTimeRegulationRequestMessage";
}

void
EnableTimeRegulationRequestMessage::out(std::ostream& os) const
{
  os << "EnableTimeRegulationRequestMessage " << *this;
}

void
EnableTimeRegulationRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
EnableTimeRegulationRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


EnableTimeRegulationResponseMessage::EnableTimeRegulationResponseMessage()
{
}

EnableTimeRegulationResponseMessage::~EnableTimeRegulationResponseMessage()
{
}

const char*
EnableTimeRegulationResponseMessage::getTypeName() const
{
  return "EnableTimeRegulationResponseMessage";
}

void
EnableTimeRegulationResponseMessage::out(std::ostream& os) const
{
  os << "EnableTimeRegulationResponseMessage " << *this;
}

void
EnableTimeRegulationResponseMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
EnableTimeRegulationResponseMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


DisableTimeRegulationRequestMessage::DisableTimeRegulationRequestMessage()
{
}

DisableTimeRegulationRequestMessage::~DisableTimeRegulationRequestMessage()
{
}

const char*
DisableTimeRegulationRequestMessage::getTypeName() const
{
  return "DisableTimeRegulationRequestMessage";
}

void
DisableTimeRegulationRequestMessage::out(std::ostream& os) const
{
  os << "DisableTimeRegulationRequestMessage " << *this;
}

void
DisableTimeRegulationRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
DisableTimeRegulationRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


CommitLowerBoundTimeStampMessage::CommitLowerBoundTimeStampMessage()
{
}

CommitLowerBoundTimeStampMessage::~CommitLowerBoundTimeStampMessage()
{
}

const char*
CommitLowerBoundTimeStampMessage::getTypeName() const
{
  return "CommitLowerBoundTimeStampMessage";
}

void
CommitLowerBoundTimeStampMessage::out(std::ostream& os) const
{
  os << "CommitLowerBoundTimeStampMessage " << *this;
}

void
CommitLowerBoundTimeStampMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
CommitLowerBoundTimeStampMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


TimeConstrainedEnabledMessage::TimeConstrainedEnabledMessage()
{
}

TimeConstrainedEnabledMessage::~TimeConstrainedEnabledMessage()
{
}

const char*
TimeConstrainedEnabledMessage::getTypeName() const
{
  return "TimeConstrainedEnabledMessage";
}

void
TimeConstrainedEnabledMessage::out(std::ostream& os) const
{
  os << "TimeConstrainedEnabledMessage " << *this;
}

void
TimeConstrainedEnabledMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
TimeConstrainedEnabledMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


TimeRegulationEnabledMessage::TimeRegulationEnabledMessage()
{
}

TimeRegulationEnabledMessage::~TimeRegulationEnabledMessage()
{
}

const char*
TimeRegulationEnabledMessage::getTypeName() const
{
  return "TimeRegulationEnabledMessage";
}

void
TimeRegulationEnabledMessage::out(std::ostream& os) const
{
  os << "TimeRegulationEnabledMessage " << *this;
}

void
TimeRegulationEnabledMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
TimeRegulationEnabledMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


TimeAdvanceGrantedMessage::TimeAdvanceGrantedMessage()
{
}

TimeAdvanceGrantedMessage::~TimeAdvanceGrantedMessage()
{
}

const char*
TimeAdvanceGrantedMessage::getTypeName() const
{
  return "TimeAdvanceGrantedMessage";
}

void
TimeAdvanceGrantedMessage::out(std::ostream& os) const
{
  os << "TimeAdvanceGrantedMessage " << *this;
}

void
TimeAdvanceGrantedMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
TimeAdvanceGrantedMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


InsertRegionMessage::InsertRegionMessage()
{
}

InsertRegionMessage::~InsertRegionMessage()
{
}

const char*
InsertRegionMessage::getTypeName() const
{
  return "InsertRegionMessage";
}

void
InsertRegionMessage::out(std::ostream& os) const
{
  os << "InsertRegionMessage " << *this;
}

void
InsertRegionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
InsertRegionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


CommitRegionMessage::CommitRegionMessage()
{
}

CommitRegionMessage::~CommitRegionMessage()
{
}

const char*
CommitRegionMessage::getTypeName() const
{
  return "CommitRegionMessage";
}

void
CommitRegionMessage::out(std::ostream& os) const
{
  os << "CommitRegionMessage " << *this;
}

void
CommitRegionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
CommitRegionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


EraseRegionMessage::EraseRegionMessage()
{
}

EraseRegionMessage::~EraseRegionMessage()
{
}

const char*
EraseRegionMessage::getTypeName() const
{
  return "EraseRegionMessage";
}

void
EraseRegionMessage::out(std::ostream& os) const
{
  os << "EraseRegionMessage " << *this;
}

void
EraseRegionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
EraseRegionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ChangeInteractionClassPublicationMessage::ChangeInteractionClassPublicationMessage()
{
}

ChangeInteractionClassPublicationMessage::~ChangeInteractionClassPublicationMessage()
{
}

const char*
ChangeInteractionClassPublicationMessage::getTypeName() const
{
  return "ChangeInteractionClassPublicationMessage";
}

void
ChangeInteractionClassPublicationMessage::out(std::ostream& os) const
{
  os << "ChangeInteractionClassPublicationMessage " << *this;
}

void
ChangeInteractionClassPublicationMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ChangeInteractionClassPublicationMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ChangeObjectClassPublicationMessage::ChangeObjectClassPublicationMessage()
{
}

ChangeObjectClassPublicationMessage::~ChangeObjectClassPublicationMessage()
{
}

const char*
ChangeObjectClassPublicationMessage::getTypeName() const
{
  return "ChangeObjectClassPublicationMessage";
}

void
ChangeObjectClassPublicationMessage::out(std::ostream& os) const
{
  os << "ChangeObjectClassPublicationMessage " << *this;
}

void
ChangeObjectClassPublicationMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ChangeObjectClassPublicationMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ChangeInteractionClassSubscriptionMessage::ChangeInteractionClassSubscriptionMessage()
{
}

ChangeInteractionClassSubscriptionMessage::~ChangeInteractionClassSubscriptionMessage()
{
}

const char*
ChangeInteractionClassSubscriptionMessage::getTypeName() const
{
  return "ChangeInteractionClassSubscriptionMessage";
}

void
ChangeInteractionClassSubscriptionMessage::out(std::ostream& os) const
{
  os << "ChangeInteractionClassSubscriptionMessage " << *this;
}

void
ChangeInteractionClassSubscriptionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ChangeInteractionClassSubscriptionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ChangeObjectClassSubscriptionMessage::ChangeObjectClassSubscriptionMessage()
{
}

ChangeObjectClassSubscriptionMessage::~ChangeObjectClassSubscriptionMessage()
{
}

const char*
ChangeObjectClassSubscriptionMessage::getTypeName() const
{
  return "ChangeObjectClassSubscriptionMessage";
}

void
ChangeObjectClassSubscriptionMessage::out(std::ostream& os) const
{
  os << "ChangeObjectClassSubscriptionMessage " << *this;
}

void
ChangeObjectClassSubscriptionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ChangeObjectClassSubscriptionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


RegistrationForObjectClassMessage::RegistrationForObjectClassMessage()
{
}

RegistrationForObjectClassMessage::~RegistrationForObjectClassMessage()
{
}

const char*
RegistrationForObjectClassMessage::getTypeName() const
{
  return "RegistrationForObjectClassMessage";
}

void
RegistrationForObjectClassMessage::out(std::ostream& os) const
{
  os << "RegistrationForObjectClassMessage " << *this;
}

void
RegistrationForObjectClassMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
RegistrationForObjectClassMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


TurnInteractionsOnMessage::TurnInteractionsOnMessage()
{
}

TurnInteractionsOnMessage::~TurnInteractionsOnMessage()
{
}

const char*
TurnInteractionsOnMessage::getTypeName() const
{
  return "TurnInteractionsOnMessage";
}

void
TurnInteractionsOnMessage::out(std::ostream& os) const
{
  os << "TurnInteractionsOnMessage " << *this;
}

void
TurnInteractionsOnMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
TurnInteractionsOnMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


InteractionMessage::InteractionMessage()
{
}

InteractionMessage::~InteractionMessage()
{
}

const char*
InteractionMessage::getTypeName() const
{
  return "InteractionMessage";
}

void
InteractionMessage::out(std::ostream& os) const
{
  os << "InteractionMessage " << *this;
}

void
InteractionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
InteractionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


TimeStampedInteractionMessage::TimeStampedInteractionMessage()
{
}

TimeStampedInteractionMessage::~TimeStampedInteractionMessage()
{
}

const char*
TimeStampedInteractionMessage::getTypeName() const
{
  return "TimeStampedInteractionMessage";
}

void
TimeStampedInteractionMessage::out(std::ostream& os) const
{
  os << "TimeStampedInteractionMessage " << *this;
}

void
TimeStampedInteractionMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
TimeStampedInteractionMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ObjectInstanceHandlesRequestMessage::ObjectInstanceHandlesRequestMessage()
{
}

ObjectInstanceHandlesRequestMessage::~ObjectInstanceHandlesRequestMessage()
{
}

const char*
ObjectInstanceHandlesRequestMessage::getTypeName() const
{
  return "ObjectInstanceHandlesRequestMessage";
}

void
ObjectInstanceHandlesRequestMessage::out(std::ostream& os) const
{
  os << "ObjectInstanceHandlesRequestMessage " << *this;
}

void
ObjectInstanceHandlesRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ObjectInstanceHandlesRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ObjectInstanceHandlesResponseMessage::ObjectInstanceHandlesResponseMessage()
{
}

ObjectInstanceHandlesResponseMessage::~ObjectInstanceHandlesResponseMessage()
{
}

const char*
ObjectInstanceHandlesResponseMessage::getTypeName() const
{
  return "ObjectInstanceHandlesResponseMessage";
}

void
ObjectInstanceHandlesResponseMessage::out(std::ostream& os) const
{
  os << "ObjectInstanceHandlesResponseMessage " << *this;
}

void
ObjectInstanceHandlesResponseMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ObjectInstanceHandlesResponseMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ReleaseMultipleObjectInstanceNameHandlePairsMessage::ReleaseMultipleObjectInstanceNameHandlePairsMessage()
{
}

ReleaseMultipleObjectInstanceNameHandlePairsMessage::~ReleaseMultipleObjectInstanceNameHandlePairsMessage()
{
}

const char*
ReleaseMultipleObjectInstanceNameHandlePairsMessage::getTypeName() const
{
  return "ReleaseMultipleObjectInstanceNameHandlePairsMessage";
}

void
ReleaseMultipleObjectInstanceNameHandlePairsMessage::out(std::ostream& os) const
{
  os << "ReleaseMultipleObjectInstanceNameHandlePairsMessage " << *this;
}

void
ReleaseMultipleObjectInstanceNameHandlePairsMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ReleaseMultipleObjectInstanceNameHandlePairsMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ReserveObjectInstanceNameRequestMessage::ReserveObjectInstanceNameRequestMessage()
{
}

ReserveObjectInstanceNameRequestMessage::~ReserveObjectInstanceNameRequestMessage()
{
}

const char*
ReserveObjectInstanceNameRequestMessage::getTypeName() const
{
  return "ReserveObjectInstanceNameRequestMessage";
}

void
ReserveObjectInstanceNameRequestMessage::out(std::ostream& os) const
{
  os << "ReserveObjectInstanceNameRequestMessage " << *this;
}

void
ReserveObjectInstanceNameRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ReserveObjectInstanceNameRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ReserveObjectInstanceNameResponseMessage::ReserveObjectInstanceNameResponseMessage()
{
}

ReserveObjectInstanceNameResponseMessage::~ReserveObjectInstanceNameResponseMessage()
{
}

const char*
ReserveObjectInstanceNameResponseMessage::getTypeName() const
{
  return "ReserveObjectInstanceNameResponseMessage";
}

void
ReserveObjectInstanceNameResponseMessage::out(std::ostream& os) const
{
  os << "ReserveObjectInstanceNameResponseMessage " << *this;
}

void
ReserveObjectInstanceNameResponseMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ReserveObjectInstanceNameResponseMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ReserveMultipleObjectInstanceNameRequestMessage::ReserveMultipleObjectInstanceNameRequestMessage()
{
}

ReserveMultipleObjectInstanceNameRequestMessage::~ReserveMultipleObjectInstanceNameRequestMessage()
{
}

const char*
ReserveMultipleObjectInstanceNameRequestMessage::getTypeName() const
{
  return "ReserveMultipleObjectInstanceNameRequestMessage";
}

void
ReserveMultipleObjectInstanceNameRequestMessage::out(std::ostream& os) const
{
  os << "ReserveMultipleObjectInstanceNameRequestMessage " << *this;
}

void
ReserveMultipleObjectInstanceNameRequestMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ReserveMultipleObjectInstanceNameRequestMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


ReserveMultipleObjectInstanceNameResponseMessage::ReserveMultipleObjectInstanceNameResponseMessage()
{
}

ReserveMultipleObjectInstanceNameResponseMessage::~ReserveMultipleObjectInstanceNameResponseMessage()
{
}

const char*
ReserveMultipleObjectInstanceNameResponseMessage::getTypeName() const
{
  return "ReserveMultipleObjectInstanceNameResponseMessage";
}

void
ReserveMultipleObjectInstanceNameResponseMessage::out(std::ostream& os) const
{
  os << "ReserveMultipleObjectInstanceNameResponseMessage " << *this;
}

void
ReserveMultipleObjectInstanceNameResponseMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
ReserveMultipleObjectInstanceNameResponseMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


InsertObjectInstanceMessage::InsertObjectInstanceMessage()
{
}

InsertObjectInstanceMessage::~InsertObjectInstanceMessage()
{
}

const char*
InsertObjectInstanceMessage::getTypeName() const
{
  return "InsertObjectInstanceMessage";
}

void
InsertObjectInstanceMessage::out(std::ostream& os) const
{
  os << "InsertObjectInstanceMessage " << *this;
}

void
InsertObjectInstanceMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
InsertObjectInstanceMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


DeleteObjectInstanceMessage::DeleteObjectInstanceMessage()
{
}

DeleteObjectInstanceMessage::~DeleteObjectInstanceMessage()
{
}

const char*
DeleteObjectInstanceMessage::getTypeName() const
{
  return "DeleteObjectInstanceMessage";
}

void
DeleteObjectInstanceMessage::out(std::ostream& os) const
{
  os << "DeleteObjectInstanceMessage " << *this;
}

void
DeleteObjectInstanceMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
DeleteObjectInstanceMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


TimeStampedDeleteObjectInstanceMessage::TimeStampedDeleteObjectInstanceMessage()
{
}

TimeStampedDeleteObjectInstanceMessage::~TimeStampedDeleteObjectInstanceMessage()
{
}

const char*
TimeStampedDeleteObjectInstanceMessage::getTypeName() const
{
  return "TimeStampedDeleteObjectInstanceMessage";
}

void
TimeStampedDeleteObjectInstanceMessage::out(std::ostream& os) const
{
  os << "TimeStampedDeleteObjectInstanceMessage " << *this;
}

void
TimeStampedDeleteObjectInstanceMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
TimeStampedDeleteObjectInstanceMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


AttributeUpdateMessage::AttributeUpdateMessage()
{
}

AttributeUpdateMessage::~AttributeUpdateMessage()
{
}

const char*
AttributeUpdateMessage::getTypeName() const
{
  return "AttributeUpdateMessage";
}

void
AttributeUpdateMessage::out(std::ostream& os) const
{
  os << "AttributeUpdateMessage " << *this;
}

void
AttributeUpdateMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
AttributeUpdateMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


TimeStampedAttributeUpdateMessage::TimeStampedAttributeUpdateMessage()
{
}

TimeStampedAttributeUpdateMessage::~TimeStampedAttributeUpdateMessage()
{
}

const char*
TimeStampedAttributeUpdateMessage::getTypeName() const
{
  return "TimeStampedAttributeUpdateMessage";
}

void
TimeStampedAttributeUpdateMessage::out(std::ostream& os) const
{
  os << "TimeStampedAttributeUpdateMessage " << *this;
}

void
TimeStampedAttributeUpdateMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
TimeStampedAttributeUpdateMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


RequestAttributeUpdateMessage::RequestAttributeUpdateMessage()
{
}

RequestAttributeUpdateMessage::~RequestAttributeUpdateMessage()
{
}

const char*
RequestAttributeUpdateMessage::getTypeName() const
{
  return "RequestAttributeUpdateMessage";
}

void
RequestAttributeUpdateMessage::out(std::ostream& os) const
{
  os << "RequestAttributeUpdateMessage " << *this;
}

void
RequestAttributeUpdateMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
RequestAttributeUpdateMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


RequestClassAttributeUpdateMessage::RequestClassAttributeUpdateMessage()
{
}

RequestClassAttributeUpdateMessage::~RequestClassAttributeUpdateMessage()
{
}

const char*
RequestClassAttributeUpdateMessage::getTypeName() const
{
  return "RequestClassAttributeUpdateMessage";
}

void
RequestClassAttributeUpdateMessage::out(std::ostream& os) const
{
  os << "RequestClassAttributeUpdateMessage " << *this;
}

void
RequestClassAttributeUpdateMessage::dispatch(AbstractMessageDispatcher& dispatcher)
{
  dispatcher.accept(*this);
}

void
RequestClassAttributeUpdateMessage::dispatch(ConstAbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}


} // namespace OpenRTI
